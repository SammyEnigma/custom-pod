version: "2.4"

x-logging:

{% if params.use_fluentd | bool %}

  mainlog: &mainlog
    driver: "fluentd"
    options:
      tag: "{% raw %}docker.{{.Name}}{% endraw %}"
      fluentd-address: "localhost:$FLUENTD_PORT"
  jsonlog: &jsonlog
    driver: "json-file"
    options:
      max-size: "50m"

{% else %}

  mainlog: &mainlog
    driver: "json-file"
    options:
      max-size: "50m"

{% endif %}

networks:
  shared:
    external: true
    name: "${CTX_NAME}-network"

services:

{% if params.pod_type in ['app', 'web'] %}

{% if params.use_certbot | bool %}

  certbot:
    container_name: "${CTX_PREFIX_RUN}certbot"
    hostname: "certbot"
    build:
      context: .
      dockerfile: "main/certbot/Dockerfile"
      args:
        IMAGE: "{{ params.images.certbot_image }}"
        VERSION: "{{ params.images.certbot_version }}"
    volumes:
    - "$DATA_DIR/sync/certbot/etc/:/etc/letsencrypt/"
    - "$DATA_DIR/sync/certbot/www/:/var/www/certbot/"
    logging: *mainlog

    {% if (params.memory.certbot | default('')) != '' %}

    mem_limit: "{{ params.memory.certbot }}"

    {% endif %}

{% endif %}

{% endif %}

{% if params.pod_type in ['app', 'db'] %}

  mongo_init:
    container_name: "${CTX_PREFIX_RUN}mongo_init"
    hostname: "mongo_init"
    build:
      context: .
      dockerfile: "main/mongo/Dockerfile"
      args:
        IMAGE: "{{ params.images.mongo_image }}"
        VERSION: "{{ params.images.mongo_version }}"
    networks:
    - "shared"
    logging: *mainlog

    {% if (params.memory.mongo_init | default('')) != '' %}

    mem_limit: "{{ params.memory.mongo_init }}"

    {% endif %}

{% endif %}

{% if params.pod_type in ['app', 'web'] %}

  s3_uploads:
    container_name: "${CTX_PREFIX_RUN}s3_uploads"
    hostname: "s3_uploads"
    build:
      context: .
      dockerfile: "main/awscli/Dockerfile"
      args:
        IMAGE: "{{ params.images.awscli_image }}"
        VERSION: "{{ params.images.awscli_version }}"
        PERL_VERSION: $PERL_VERSION
        S3_ACCESS_KEY: $S3_UPLOADS_ACCESS_KEY
        S3_SECRET_KEY: $S3_UPLOADS_SECRET_KEY
    restart: "unless-stopped"
    networks:
    - "shared"
    volumes:
    - "$DATA_DIR:/var/main/data"
    - "$DATA_DIR/tmp:/tmp/main"
    - "$DATA_DIR/log:/var/log/main"
    logging: *mainlog
    command: "tail -f /dev/null"

    {% if (params.memory.s3_uploads | default('')) != '' %}

    mem_limit: "{{ params.memory.s3_uploads }}"

    {% endif %}

{% endif %}

  s3_backup:
    container_name: "${CTX_PREFIX_RUN}s3_backup"
    hostname: "s3_backup"
    build:
      context: .
      dockerfile: "main/awscli/Dockerfile"
      args:
        IMAGE: "{{ params.images.awscli_image }}"
        VERSION: "{{ params.images.awscli_version }}"
        PERL_VERSION: $PERL_VERSION
        S3_ACCESS_KEY: $S3_BACKUP_ACCESS_KEY
        S3_SECRET_KEY: $S3_BACKUP_SECRET_KEY
    restart: "unless-stopped"
    networks:
    - "shared"
    volumes:
    - "$DATA_DIR:/var/main/data"
    - "$DATA_DIR/tmp:/tmp/main"
    - "$DATA_DIR/log:/var/log/main"
    logging: *mainlog
    command: "tail -f /dev/null"

    {% if (params.memory.s3_backup | default('')) != '' %}

    mem_limit: "{{ params.memory.s3_backup }}"

    {% endif %}
