version: '2.4'

x-logging:

  {% if params.use_fluentd | bool %}

  mainlog: &mainlog
    driver: "fluentd"
    options:
      tag: "{% raw %}docker.{{.Name}}{% endraw %}"
      fluentd-address: "localhost:$FLUENTD_PORT"
  jsonlog: &jsonlog
    driver: "json-file"
    options:
      max-size: "50m"

  {% else %}

  mainlog: &mainlog
    driver: "json-file"
    options:
      max-size: "50m"

  {% endif %}

networks:

  {% if params.use_fluentd | bool %}

  log:
    driver: "bridge"

  {% endif %}

  shared:
    external: true
    name: "${CTX_NAME}-network"

{% if (params.local | bool) and (not (params.external_volumes | bool)) %}

volumes:
  mongo_db: {}

{% endif %}

services:

  {% if params.pod_type in ['app', 'web'] %}

  nginx:
    container_name: "${CTX_PREFIX_MAIN}nginx"
    hostname: "nginx"
    build:
      context: .
      dockerfile: "shared/containers/nginx/Dockerfile"
      args:
        IMAGE: "{{ params.images.nginx_image }}"
        VERSION: "{{ params.images.nginx_version }}"
    restart: "unless-stopped"
    depends_on:
    - "rocketchat"

    {% if params.use_mongo_express | bool %}

    - "mongo_express"

    {% endif %}

    {% if params.use_theia | bool %}

    - "theia"

    {% endif %}

    {% if params.use_minio_gateway | bool %}

    - "minio_gateway"

    {% endif %}

    {% if params.use_filestash | bool %}

    - "filestash"

    {% endif %}

    {% if params.use_nextcloud | bool %}

    - "nextcloud"

    {% endif %}

    {% if params.use_fluentd | bool %}

    - "fluentd"

    {% endif %}

    ports:
    - "$PUBLIC_HTTP_PORT:80"
    - "$PUBLIC_HTTPS_PORT:443"
    - "$PRIVATE_HTTP_PORT:9080"
    - "$PRIVATE_HTTPS_PORT:9443"
    networks:
    - "shared"
    volumes:
    - "$DATA_DIR/sync/certbot/etc:/etc/ssl:ro"
    - "$DATA_DIR/sync/certbot/www:/var/www/certbot:ro"
    - "$DATA_DIR/sync/nginx:/var/main/data/sync/nginx:ro"
    - "$DATA_DIR/tmp/nginx:/tmp/main/nginx"
    - "$DATA_DIR/tmp/tmp/nginx:/tmp/main/tmp/nginx"
    logging: *mainlog

    {% if (params.memory.nginx | default('')) != '' %}

    mem_limit: "{{ params.memory.nginx }}"

    {% endif %}

  rocketchat:
    container_name: "${CTX_PREFIX_MAIN}rocketchat"
    hostname: "rocketchat"
    build:
      context: .
      dockerfile: "rocketchat/containers/rocketchat/Dockerfile"
      args:
        IMAGE: "{{ params.images.rocketchat_image }}"
        VERSION: "{{ params.images.rocketchat_version }}"
    restart: "unless-stopped"

    {% if (params.use_fluentd | bool) or (params.pod_type == 'app') %}

    depends_on:

    {% if params.use_fluentd | bool %}

    - "fluentd"

    {% endif %}

    {% if params.pod_type == 'app' %}

    - "mongo"

    {% endif %}

    {% endif %}

    environment:
    - PORT=3000
    - ROOT_URL=http://localhost:3000
    - MONGO_URL=mongodb://$DB_USER:$DB_PASSWORD@mongo:27017/$DB_NAME?authSource=admin
    - MONGO_OPLOG_URL=mongodb://oploguser:$DB_OPLOG_PASSWORD@mongo:27017/local?authSource=admin
    - MAIL_URL={{ params.rocketchat.mail_url | default('') }}
    - CDN_PREFIX={{ params.rocketchat.cdn_prefix | default('') }}
    - CDN_JSCSS_PREFIX={{ params.rocketchat.cdn_prefix | default('') }}
    - SETTINGS_BLOCKED=FileUpload_Storage_Type,FileUpload_S3_Bucket,FileUpload_S3_Region,FileUpload_S3_BucketURL,FileUpload_FileSystemPath
    - FileUpload_Storage_Type={{ params.rocketchat.storage_type }}
    - FileUpload_FileSystemPath=/app/uploads

    {% if params.rocketchat.storage_type == 'AmazonS3' %}

    - FileUpload_S3_Bucket={{ params.rocketchat.fileupload_s3_bucket }}
    - FileUpload_S3_Region={{ params.rocketchat.fileupload_s3_region }}
    - FileUpload_S3_BucketURL={{ params.rocketchat.fileupload_s3_bucket_url }}
    - FileUpload_S3_Acl={{ params.rocketchat.fileupload_s3_acl }}
    - FileUpload_S3_CDN={{ params.rocketchat.fileupload_s3_cdn }}
    - FileUpload_S3_AWSAccessKeyId=$ROCKETCHAT_FILEUPLOAD_S3_ACCESS_KEY
    - FileUpload_S3_AWSSecretAccessKey=$ROCKETCHAT_FILEUPLOAD_S3_SECRET_KEY

    {% endif %}

    networks:
    - "shared"
    volumes:
    - "$DATA_DIR/rocketchat/uploads:/app/uploads"
    command: >
      bash -c
        "for i in `seq 1 30`; do
          node main.js &&
          s=$$? && break || s=$$?;
          echo \"Tried $$i times. Waiting 5 secs...\";
          sleep 5;
        done; (exit $$s)"
    logging: *mainlog

    {% if (params.memory.rocketchat | default('')) != '' %}

    mem_limit: "{{ params.memory.rocketchat }}"

    {% endif %}

  {% if params.use_bot | bool %}

  hubot:
    container_name: "${CTX_PREFIX_MAIN}hubot"
    hostname: "hubot"
    build:
      context: .
      dockerfile: "rocketchat/containers/hubot/Dockerfile"
      args:
        IMAGE: "{{ params.images.hubot_image }}"
        VERSION: "{{ params.images.hubot_version }}"
    restart: unless-stopped
    depends_on:
    - "rocketchat"

    {% if params.use_fluentd | bool %}

    - "fluentd"

    {% endif %}

    environment:
    - ROCKETCHAT_URL=rocketchat:3000
    - LISTEN_ON_ALL_PUBLIC=true
    - ROCKETCHAT_ROOM=$HUBOT_ROOM
    - ROCKETCHAT_USER=$HUBOT_USER
    - ROCKETCHAT_PASSWORD=$HUBOT_PASSWORD
    - BOT_NAME=$HUBOT_BOT_NAME
    - EXTERNAL_SCRIPTS=hubot-help,hubot-seen,hubot-links,hubot-diagnostics
    networks:
    - "shared"
    volumes:
    - "$DATA_DIR/hubot/scripts:/home/hubot/scripts"
    logging: *mainlog

    {% if (params.memory.hubot | default('')) != '' %}

    mem_limit: "{{ params.memory.hubot }}"

    {% endif %}

  {% endif %}

  {% if params.use_mongo_express %}

  mongo_express:
    container_name: "${CTX_PREFIX_MAIN}mongo_express"
    hostname: "mongo_express"
    build:
      context: .
      dockerfile: "shared/containers/mongo-express/Dockerfile"
      args:
        IMAGE: "{{ params.images.mongo_express_image }}"
        VERSION: "{{ params.images.mongo_express_version }}"
    restart: "unless-stopped"

    {% if params.use_fluentd | bool %}

    depends_on:
    - "fluentd"

    {% endif %}

    environment:
    - ME_CONFIG_OPTIONS_EDITORTHEME=ambiance
    - ME_CONFIG_MONGODB_SERVER=mongo
    - ME_CONFIG_MONGODB_PORT=27017
    - ME_CONFIG_MONGODB_ADMINUSERNAME=$MONGO_EXPRESS_USER
    - ME_CONFIG_MONGODB_ADMINPASSWORD=$MONGO_EXPRESS_PASS
    networks:
    - "shared"
    logging: *mainlog

    {% if (params.memory.mongo_express | default('')) != '' %}

    mem_limit: "{{ params.memory.mongo_express }}"

    {% endif %}

  {% endif %}

  {% if params.use_theia | bool %}

  theia:
    container_name: "${CTX_PREFIX_MAIN}theia"
    hostname: "theia"
    build:
      context: .
      dockerfile: "shared/containers/theia/Dockerfile"
      args:
        IMAGE: "{{ params.images.theia_image }}"
        VERSION: "{{ params.images.theia_version }}"
    restart: "unless-stopped"
    user: root

    {% if params.use_fluentd | bool %}

    depends_on:
    - "fluentd"

    {% endif %}

    networks:
    - "shared"
    volumes:
    - "$DATA_DIR/.git:/home/project/.git:ro"
    - "$DATA_DIR:/home/project/data:ro"
    - "$DATA_DIR/sync:/home/project/sync:cached"
    - "$DATA_DIR/action:/home/project/action:cached"

    {% if params.local | bool %}

    - "$DATA_DIR/log:/home/project/log:cached"
    - "$DATA_DIR/tmp:/home/project/tmp:cached"

    {% endif %}

    - "$DATA_DIR/tmp/theia:/tmp/main/theia"
    - "$DATA_DIR/tmp/tmp/theia:/tmp/main/tmp/theia"
    logging: *mainlog

    {% if (params.memory.theia | default('')) != '' %}

    mem_limit: "{{ params.memory.theia }}"

    {% endif %}

  {% endif %}

  {% if params.use_minio_gateway | bool %}

  minio_gateway:
    container_name: "${CTX_PREFIX_MAIN}minio_gateway"
    hostname: "minio_gateway"
    build:
      context: .
      dockerfile: "shared/containers/minio-gateway/Dockerfile"
      args:
        IMAGE: "{{ params.images.minio_gateway_image }}"
        VERSION: "{{ params.images.minio_gateway_version }}"
    restart: "unless-stopped"
    environment:
      MINIO_ACCESS_KEY: "$MINIO_GATEWAY_ACCESS_KEY"
      MINIO_SECRET_KEY: "$MINIO_GATEWAY_SECRET_KEY"

    {% if params.use_fluentd | bool %}

    depends_on:
    - "fluentd"

    {% endif %}

    networks:
    - "shared"
    volumes:
    - "$DATA_DIR/tmp/minio_gateway:/tmp/main/minio_gateway"
    - "$DATA_DIR/tmp/tmp/minio_gateway:/tmp/main/tmp/minio_gateway"
    logging: *mainlog
    command: "gateway s3 '$MINIO_GATEWAY_ENDPOINT'"

    {% if (params.memory.minio_gateway | default('')) != '' %}

    mem_limit: "{{ params.memory.minio_gateway }}"

    {% endif %}

  {% endif %}

  {% if params.use_filestash | bool %}

  filestash:
    container_name: "${CTX_PREFIX_MAIN}filestash"
    hostname: "filestash"
    build:
      context: .
      dockerfile: "shared/containers/filestash/Dockerfile"
      args:
        IMAGE: "{{ params.images.filestash_image }}"
        VERSION: "{{ params.images.filestash_version }}"
    restart: "unless-stopped"

    {% if params.use_fluentd | bool %}

    depends_on:
    - "fluentd"

    {% endif %}

    networks:
    - "shared"
    volumes:
    - "$DATA_DIR/tmp/filestash:/tmp/main/filestash"
    - "$DATA_DIR/tmp/tmp/filestash:/tmp/main/tmp/filestash"
    logging: *mainlog

    {% if (params.memory.filestash | default('')) != '' %}

    mem_limit: "{{ params.memory.filestash }}"

    {% endif %}

  {% endif %}

  {% if params.use_nextcloud | bool %}

  nextcloud:
    container_name: "${CTX_PREFIX_MAIN}nextcloud"
    hostname: "nextcloud"
    build:
      context: .
      dockerfile: "shared/containers/nextcloud/Dockerfile"
      args:
        IMAGE: "{{ params.images.nextcloud_image }}"
        VERSION: "{{ params.images.nextcloud_version }}"
    restart: "unless-stopped"

    {% if params.use_fluentd | bool %}

    depends_on:
    - "fluentd"

    {% endif %}

    networks:
    - "shared"
    volumes:

    {% if (params.local | bool) and (not (params.external_volumes | bool)) %}

    - "nextcloud:/var/www/html"

    {% else %}

    - "$DATA_DIR/nextcloud:/var/www/html"

    {% endif %}

    - "$DATA_DIR:/var/main/data:ro"
    - "$DATA_DIR/sync:/var/main/data/sync"
    - "$DATA_DIR/action:/var/main/data/action"
    - "$DATA_DIR/tmp/nextcloud:/tmp/main/nextcloud"
    - "$DATA_DIR/tmp/tmp/nextcloud:/tmp/main/tmp/nextcloud"
    logging: *mainlog

    {% if (params.memory.nextcloud | default('')) != '' %}

    mem_limit: "{{ params.memory.nextcloud }}"

    {% endif %}

  {% endif %}

  {% endif %}

  {% if params.pod_type in ['app', 'db'] %}

  mongo:
    container_name: "${CTX_PREFIX_MAIN}mongo"
    hostname: "mongo"
    build:
      context: .
      dockerfile: "shared/containers/mongo/Dockerfile"
      args:
        IMAGE: "{{ params.images.mongo_image }}"
        VERSION: "{{ params.images.mongo_version }}"
    restart: "unless-stopped"

    {% if params.use_fluentd | bool %}

    depends_on:
    - "fluentd"

    {% endif %}

    environment:
    - MONGO_INITDB_ROOT_USERNAME=$DB_ROOT_USER
    - MONGO_INITDB_ROOT_PASSWORD=$DB_ROOT_PASS
    networks:
    - "shared"
    volumes:

    {% if (params.local | bool) and (not (params.external_volumes | bool)) %}

    - "mongo_db:/data/db"

    {% else %}

    - "$DATA_DIR/mongo/db:/data/db"

    {% endif %}

    - "$DATA_DIR/tmp/mongo:/tmp/main/mongo"
    - "$DATA_DIR/tmp/tmp/mongo:/tmp/main/tmp/mongo"
    logging: *mainlog
    command: mongod --auth --smallfiles --oplogSize 128 --replSet rs0 --storageEngine=mmapv1

    {% if (params.memory.mongo | default('')) != '' %}

    mem_limit: "{{ params.memory.mongo }}"

    {% endif %}

  {% endif %}

  toolbox:
    container_name: "${CTX_PREFIX_MAIN}toolbox"
    hostname: "toolbox"
    build:
      context: .
      dockerfile: "shared/containers/toolbox/Dockerfile"
      args:
        IMAGE: "{{ params.images.toolbox_image }}"
        VERSION: "{{ params.images.toolbox_version }}"
    restart: "unless-stopped"

    {% if params.use_fluentd | bool %}

    depends_on:
    - "fluentd"

    {% endif %}

    networks:
    - "shared"
    volumes:
    - "$DATA_DIR:/var/main/data"
    - "$DATA_DIR/tmp:/tmp/main"
    - "$DATA_DIR/log:/var/log/main"
    logging: *mainlog
    command: "tail -f /dev/null"

    {% if (params.memory.toolbox | default('')) != '' %}

    mem_limit: "{{ params.memory.toolbox }}"

    {% endif %}

  {% if params.use_fluentd | bool %}

  fluentd:
    container_name: "${CTX_PREFIX_MAIN}fluentd"
    hostname: "fluentd"
    build:
      context: .
      dockerfile: "shared/containers/fluentd/Dockerfile"
      args:
        IMAGE: "{{ params.images.fluentd_image }}"
        VERSION: "{{ params.images.fluentd_version }}"
        OUTPUT_PLUGIN: $FLUENTD_OUTPUT_PLUGIN
    restart: "unless-stopped"
    ports:
    - "$FLUENTD_PORT:24224"
    - "$FLUENTD_PORT:24224/udp"
    networks:
    - "log"
    volumes:
    - "$DATA_DIR/log/fluentd:/var/log/main/fluentd"
    logging: *jsonlog

    {% if (params.memory.fluentd | default('')) != '' %}

    mem_limit: "{{ params.memory.fluentd }}"

    {% endif %}

  {% endif %}