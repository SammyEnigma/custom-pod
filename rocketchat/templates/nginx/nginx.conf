worker_processes {{ params.worker_process | default('1', true) }};

events {
  worker_connections {{ params.worker_connections | default('512', true) }};
}

http {
  {% macro include_server_info(arg_domain, arg_listen, arg_port, arg_ssl, arg_private, arg_use_basic_auth) %}

    {% set var_port_suffix = (arg_port in ('80', '443')) | ternary('', ':' + arg_port) %}

    server_name {{ arg_domain }};
    listen {{ arg_listen }};
		server_tokens off;

    {% if arg_use_basic_auth | bool %}

    auth_basic           "Administratorâ€™s Area";
    auth_basic_user_file conf/.htpasswd;

    {% endif %}

    {% if not (arg_private | bool) %}

    if ( $ip_blacklist = 1 ) {
        return 403;
    }
    if ( $ua_blacklist = 1 ) {
        return 403;
    }

    {% else %}

    set $my_origin "{{ arg_ssl | bool | ternary('https', 'http') }}://{{ arg_domain }}{{ var_port_suffix }}";

    set $method_csrf '1';
    set $nonempty_http_origin '1';
    set $wrong_http_origin '1';
    set $block_csrf '0';

    if ( $request_method = 'GET') {
      set $method_csrf '0';
    }

    if ( $http_origin = '') {
      set $nonempty_http_origin '0';
    }

    if ( $http_origin = $my_origin) {
      set $wrong_http_origin '0';
    }

    if ( $method_csrf$nonempty_http_origin$wrong_http_origin = '111') {
      set $block_csrf '1';
    }

    if ( $block_csrf = 1 ) {
        return 418;
    }

    {% endif %}

    {% if arg_ssl | bool %}

    ssl_certificate       /etc/ssl/live/{{ params.main_domain }}/fullchain.pem;
    ssl_certificate_key   /etc/ssl/live/{{ params.main_domain }}/privkey.pem;
    include               include/options-ssl-nginx.conf;
    ssl_dhparam           include/ssl-dhparams.pem;

    {% endif %}

    {% if arg_listen == '80' %}

		location /.well-known/acme-challenge/ {
			root /var/www/certbot;
		}

    {% endif %}

  {% endmacro %}

  {% macro include_redirect(arg_domain, arg_port, arg_ssl) %}

    {% set var_protocol = arg_ssl | bool | ternary('https', 'http') %}
    {% set var_port_suffix = (arg_port in ('80', '443')) | ternary('', ':' + arg_port) %}

		location / {
      return 301 {{ var_protocol }}://{{ arg_domain }}{{ var_port_suffix }}$request_uri;
		}

  {% endmacro %}

  {% macro include_location_info(arg_upstream, arg_port, arg_use_basic_auth) %}

      {% set var_port_suffix = (arg_port in ('80', '443')) | ternary('', ':' + arg_port) %}

      proxy_pass         {{ arg_upstream }};
      proxy_redirect     off;
      proxy_set_header   Host                $host{{ var_port_suffix }};
      proxy_set_header   X-Real-IP           $remote_addr;
      proxy_set_header   X-Forwarded-For     $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Host    $server_name;
      proxy_set_header   X-Forwarded-Proto   $scheme;
      proxy_set_header   X-Forwarded-Port    {{ arg_port }};

      {% if arg_use_basic_auth | bool %}

      proxy_set_header   Authorization       "";

      {% endif %}

  {% endmacro %}

  {% macro include_default(
    arg_service,
    arg_upstream,
    arg_upstream_full,
    arg_domain,
    arg_port,
    arg_listen,
    arg_ssl,
    arg_upgrade,
    arg_private,
    arg_use_basic_auth,
    arg_main_domain)
  %}

  {% set var_http_port = arg_private | bool | ternary('9080', '80') %}

  upstream {{ arg_upstream }} {
    server {{ arg_service }};
  }

  {% if ((arg_main_domain == '') or (arg_domain != arg_main_domain)) and (arg_private | bool) %}

  server {
    {{ include_server_info(arg_domain, 80, arg_port, false, arg_private, arg_use_basic_auth) }}
  }

  {% endif %}

  {% if arg_ssl | bool %}

  server {
    {{ include_server_info(arg_domain, var_http_port, arg_port, false, arg_private, arg_use_basic_auth) }}
    {{ include_redirect(arg_domain, arg_port, arg_ssl) }}
  }

  {% endif %}

  server {
    {{ include_server_info(arg_domain, arg_listen, arg_port, arg_ssl, arg_private, arg_use_basic_auth) }}

    location / {
      {{ include_location_info(arg_upstream_full, arg_port, arg_use_basic_auth) }}

      {% if arg_upgrade | bool %}

      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;

      {% endif %}

    }
  }

  {% endmacro %}

	map_hash_max_size {{ params.conf.map_hash_max_size | default('1024', true) }};
	map_hash_bucket_size {{ params.conf.map_hash_bucket_size | default('128', true) }};

	geo $ip_blacklist {
		include /var/main/data/sync/nginx/manual/ips-blacklist.conf;
		include /var/main/data/sync/nginx/auto/ips-blacklist-auto.conf;
		default 0;
	}

	map $http_user_agent $ua_blacklist {
		include /var/main/data/sync/nginx/manual/ua-blacklist.conf;
		default 0;
	}

  {% set var_default_log_format = '$remote_addr $sent_http_x_user_id $upstream_response_time $status $remote_user [$time_local] "$host" "$request" $body_bytes_sent "$http_referer" "$http_user_agent" $request_time' %}

  log_format main '{{ params.conf.log_format | default(var_default_log_format, true) }}';
  access_log /dev/stdout main;
  error_log /dev/stderr;

  limit_req_zone $binary_remote_addr zone=mainlimit:10m rate={{ params.conf.limit_req_zone_rate | default('3r/s', true) }};
  limit_conn_zone $binary_remote_addr zone=connlimit:10m;
  limit_conn_zone $binary_remote_addr zone=uploadconnlimit:10m;

  proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=web_cache:{{ params.conf.web_cache | default('20m', true) }} max_size={{ params.conf.web_cache_max_size | default('200m', true) }} inactive={{ params.conf.web_cache_inactive | default('30m', true) }};
  proxy_connect_timeout  {{ params.conf.proxy_connect_timeout | default('30', true) }};
  proxy_send_timeout     {{ params.conf.proxy_send_timeout | default('60', true) }};
  proxy_read_timeout     {{ params.conf.proxy_read_timeout | default('60', true) }};

  send_timeout           {{ params.conf.send_timeout | default('60', true) }};
  client_body_timeout    {{ params.conf.client_body_timeout | default('5s', true) }};
  client_header_timeout  {{ params.conf.client_header_timeout | default('5s', true) }};

	include include/gzip.conf;

  map $http_upgrade $connection_upgrade {
      default upgrade;
      '' close;
  }

  {% set var_main_service = 'rocketchat:3000' %}
  {% set var_main_upstream = 'upstream-main' %}
  {% set var_main_upstream_full = 'http://' + var_main_upstream %}
  {% set var_main_listen = params.main_ssl | bool | ternary('443 ssl', '80') %}
  {% set var_main_private = false %}
  {% set var_main_use_basic_auth = false %}

  {% macro include_main_server_info(arg_domain, arg_listen, arg_ssl) %}

    {{ include_server_info(arg_domain, arg_listen, params.main_port, arg_ssl, var_main_private, var_main_use_basic_auth) }}

  {% endmacro %}

  {% macro include_main_location_info() %}

      {{ include_location_info(var_main_upstream_full, params.main_port, var_main_use_basic_auth) }}

  {% endmacro %}

  upstream {{ var_main_upstream }} {
    server {{ var_main_service }};
  }

  {% if params.main_ssl | bool %}

  server {
    {{ include_main_server_info('www.' + params.main_domain, 80, false) }}
    {{ include_redirect(params.main_domain, params.main_port, params.main_ssl) }}
  }

  server {
    {{ include_main_server_info(params.main_domain, 80, false) }}
    {{ include_redirect(params.main_domain, params.main_port, params.main_ssl) }}
  }

  {% endif %}

  server {
    {{ include_main_server_info('www.' + params.main_domain, var_main_listen, params.main_ssl) }}
    {{ include_redirect(params.main_domain, params.main_port, params.main_ssl) }}
  }

  server {
    {{ include_main_server_info(params.main_domain, var_main_listen, params.main_ssl) }}

    location / {
      {{ include_main_location_info() }}
    }
  }

  {% if params.use_theia | bool %}

  {% set var_theia_service = 'theia:3000' %}
  {% set var_theia_upstream = 'upstream-theia' %}
  {% set var_theia_upstream_full = 'http://' + var_theia_upstream %}
  {% set var_theia_listen = params.theia_ssl | bool | ternary('9443 ssl', '9080') %}
  {% set var_theia_upgrade = true %}
  {% set var_theia_private = true %}
  {% set var_theia_use_basic_auth = true %}

  {{ include_default(
    var_theia_service,
    var_theia_upstream,
    var_theia_upstream_full,
    params.theia_domain,
    params.theia_port,
    var_theia_listen,
    params.theia_ssl,
    var_theia_upgrade,
    var_theia_private,
    var_theia_use_basic_auth,
    params.main_domain)
  }}

  {% endif %}

  {% if params.use_minio_gateway | bool %}

  {% set var_minio_gateway_service = 'minio_gateway:9000' %}
  {% set var_minio_gateway_upstream = 'upstream-minio_gateway' %}
  {% set var_minio_gateway_upstream_full = 'http://' + var_minio_gateway_upstream %}
  {% set var_minio_gateway_listen = params.minio_gateway_ssl | bool | ternary('9443 ssl', '9080') %}
  {% set var_minio_gateway_upgrade = false %}
  {% set var_minio_gateway_private = true %}
  {% set var_minio_gateway_use_basic_auth = false %}

  {{ include_default(
    var_minio_gateway_service,
    var_minio_gateway_upstream,
    var_minio_gateway_upstream_full,
    params.minio_gateway_domain,
    params.minio_gateway_port,
    var_minio_gateway_listen,
    params.minio_gateway_ssl,
    var_minio_gateway_upgrade,
    var_minio_gateway_private,
    var_minio_gateway_use_basic_auth,
    params.main_domain)
  }}

  {% endif %}

  {% if params.use_filestash | bool %}

  {% set var_filestash_service = 'filestash:8334' %}
  {% set var_filestash_upstream = 'upstream-filestash' %}
  {% set var_filestash_upstream_full = 'http://' + var_filestash_upstream %}
  {% set var_filestash_listen = params.filestash_ssl | bool | ternary('9443 ssl', '9080') %}
  {% set var_filestash_upgrade = true %}
  {% set var_filestash_private = true %}
  {% set var_filestash_use_basic_auth = true %}

  {{ include_default(
    var_filestash_service,
    var_filestash_upstream,
    var_filestash_upstream_full,
    params.filestash_domain,
    params.filestash_port,
    var_filestash_listen,
    params.filestash_ssl,
    var_filestash_upgrade,
    var_filestash_private,
    var_filestash_use_basic_auth,
    params.main_domain)
  }}

  {% endif %}

  {% if params.use_nextcloud | bool %}

  {% set var_nextcloud_service = 'nextcloud:80' %}
  {% set var_nextcloud_upstream = 'upstream-nextcloud' %}
  {% set var_nextcloud_upstream_full = 'http://' + var_nextcloud_upstream %}
  {% set var_nextcloud_listen = params.nextcloud_ssl | bool | ternary('9443 ssl', '9080') %}
  {% set var_nextcloud_upgrade = false %}
  {% set var_nextcloud_private = true %}
  {% set var_nextcloud_use_basic_auth = true %}

  {{ include_default(
    var_nextcloud_service,
    var_nextcloud_upstream,
    var_nextcloud_upstream_full,
    params.nextcloud_domain,
    params.nextcloud_port,
    var_nextcloud_listen,
    params.nextcloud_ssl,
    var_nextcloud_upgrade,
    var_nextcloud_private,
    var_nextcloud_use_basic_auth,
    params.main_domain)
  }}

  {% endif %}

  {% if params.use_mongo_express | bool %}

  {% set var_me_service = 'mongo_express:8081' %}
  {% set var_me_upstream = 'upstream-mongo_express' %}
  {% set var_me_upstream_full = 'http://' + var_me_upstream %}
  {% set var_me_listen = params.me_ssl | bool | ternary('9443 ssl', '9080') %}
  {% set var_me_upgrade = false %}
  {% set var_me_private = true %}
  {% set var_me_use_basic_auth = true %}

  {{ include_default(
    var_me_service,
    var_me_upstream,
    var_me_upstream_full,
    params.me_domain,
    params.me_port,
    var_me_listen,
    params.me_ssl,
    var_me_upgrade,
    var_me_private,
    var_me_use_basic_auth,
    params.main_domain)
  }}

  {% endif %}
}
