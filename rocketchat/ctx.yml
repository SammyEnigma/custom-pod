## general vars - start ###

{% set var_local = params.main.local | default(false) | bool %}
{% set var_remote_test = params.main.remote_test | default(false) | bool %}
{% set var_local_dev = var_local and (not var_remote_test) %}
{% set var_run = params.main.run | default({}) %}
{% set var_run_tasks = params.main.run_tasks | default({}) %}
{% set var_run_dict = params.main.run_dict | default({}) %}
{% set var_run_tasks_dict = params.main.run_tasks_dict | default({}) %}

## general vars - end ###

### others ###

{% set var_pod_type = params.main.type | default('') %}

{% if not (var_pod_type in ['app']) %}
  {% set error = {} %}
  {{ error['error.pod_type.invalid.' + var_pod_type] }}
{% endif %}

{% set var_main_dir = params.main.custom_dir + '/rocketchat' %}

{% set var_pod_dir_rel = '../..' %}
{% set var_data_dir = var_local
  | ternary(var_pod_dir_rel + '/' + params.pod.data_dir, params.pod.data_dir)
%}

{% set var_orchestration_main_file = 'orchestration/docker-compose.' + var_pod_type + '.' +
  (var_local_dev | ternary('dev.yml', 'yml'))
%}
{% set var_orchestration_run_file = 'orchestration/docker-compose.run.' +
  (var_local_dev | ternary('dev.yml', 'yml'))
%}

{% set var_main_domain_port = params.main.custom_domain.main_ssl | bool |
  ternary(params.main.custom_domain.public_https_port, params.main.custom_domain.public_http_port)
%}
{% set var_me_domain_port = params.main.custom_domain.me_ssl | bool |
  ternary(params.main.custom_domain.private_https_port, params.main.custom_domain.private_http_port)
%}

### main ###

templates:

{% if params.main.use_bot | bool %}

  {% set var_hubot_image = params.main.custom_images.hubot_image %}
  {% set var_hubot_version = params.main.custom_images.hubot_version %}
  {% set var_hubot_room = params.credentials.hubot.room %}
  {% set var_hubot_user = params.credentials.hubot.user %}
  {% set var_hubot_password = params.credentials.hubot.password %}
  {% set var_hubot_bot_name = params.credentials.hubot.bot_name %}
  {% set var_container_mem_hubot = params.main.custom_memory.hubot %}

{% else %}

  {% set var_hubot_image = params.main.custom_images.hubot_fake_image | default('alpine') %}
  {% set var_hubot_version = params.main.custom_images.hubot_fake_version | default('3.11.6') %}
  {% set var_hubot_room = '' %}
  {% set var_hubot_user = '' %}
  {% set var_hubot_password = '' %}
  {% set var_hubot_bot_name = '' %}
  {% set var_container_mem_hubot = '64mb' %}

{% endif %}

{% set var_ctx_full_name = params.env_name  + '-' + params.ctx_name + '-' + params.pod.name %}
{% set var_ctx_prefix_main = params.main.use_prefix | bool
  | ternary(var_ctx_full_name + '-main', '')
%}
{% set var_ctx_prefix_run = params.main.use_prefix | bool
  | ternary(var_ctx_full_name + '-run', '')
%}

- src: "{{ var_main_dir }}/templates/docker-compose.env"
  dest: "{{ var_main_dir }}/.env"
  root: true
  params:
    ctx_full_name: "{{ var_ctx_full_name }}"
    ctx_prefix_main: "{{ var_ctx_prefix_main }}"
    ctx_prefix_run: "{{ var_ctx_prefix_run }}"
    data_dir: "{{ var_data_dir }}"
    local: "{{ var_local | default(false) | bool | ternary('true', 'false') }}"
    local_dev: "{{ var_local_dev | default(false) | bool | ternary('true', 'false') }}"
    type: "{{ var_pod_type }}"

    {% if var_pod_type in ['app', 'web'] %}

    nginx_image: "{{ params.main.custom_images.nginx_image }}"
    nginx_version: "{{ params.main.custom_images.nginx_version }}"
    rocketchat_image: "{{ params.main.custom_images.rocketchat_image }}"
    rocketchat_version: "{{ params.main.custom_images.rocketchat_version }}"
    hubot_image: "{{ var_hubot_image }}"
    hubot_version: "{{ var_hubot_version }}"
    mongo_express_image: "{{ params.main.custom_images.mongo_express_image }}"
    mongo_express_version: "{{ params.main.custom_images.mongo_express_version }}"

    {% endif %}

    {% if var_pod_type in ['app', 'db'] %}

    mongo_image: "{{ params.main.custom_images.mongo_image }}"
    mongo_version: "{{ params.main.custom_images.mongo_version }}"

    {% endif %}

    toolbox_image: "{{ params.main.custom_images.toolbox_image }}"
    toolbox_version: "{{ params.main.custom_images.toolbox_version }}"
    awscli_image: "{{ params.main.custom_images.awscli_image }}"
    awscli_version: "{{ params.main.custom_images.awscli_version }}"

    {% if var_pod_type in ['app', 'web'] %}

    {% set var_storage_type = params.main.custom_args.rocketchat.storage_type | default('FileSystem') %}

    public_http_port: "{{ params.main.custom_domain.public_http_port }}"
    public_https_port: "{{ params.main.custom_domain.public_https_port }}"
    private_http_port: "{{ params.main.custom_domain.private_http_port }}"
    private_https_port: "{{ params.main.custom_domain.private_https_port }}"
    rocketchat_mail_url: "{{ credentials.rocketchat.mail_url | default('smtp://smtp.email') }}"
    rocketchat_fileupload_storage_type: "{{ var_storage_type }}"

    {% if var_storage_type == 'AmazonS3' %}

    rocketchat_fileupload_s3_bucketurl: "{{ params.main.custom_args.rocketchat.uploads_bucket_endpoint }}"
    rocketchat_fileupload_s3_bucket: "{{ params.main.custom_args.rocketchat.uploads_bucket_name }}"
    rocketchat_fileupload_s3_region: "{{ params.main.custom_args.rocketchat.uploads_bucket_region | default('') }}"
    rocketchat_fileupload_s3_acl: "{{ params.main.custom_args.rocketchat.uploads_bucket_acl | default('') }}"
    rocketchat_fileupload_s3_awsaccesskeyid: "{{ credentials.rocketchat_uploads_bucket.access_key }}"
    rocketchat_fileupload_s3_awssecretaccesskey: "{{ credentials.rocketchat_uploads_bucket.secret_key }}"
    rocketchat_fileupload_s3_cdn: "{{ params.main.custom_args.rocketchat.s3_cdn | default('') }}"

    {% else %}

    rocketchat_fileupload_s3_bucketurl: ""
    rocketchat_fileupload_s3_bucket: ""
    rocketchat_fileupload_s3_region: ""
    rocketchat_fileupload_s3_acl: ""
    rocketchat_fileupload_s3_awsaccesskeyid: ""
    rocketchat_fileupload_s3_awssecretaccesskey: ""
    rocketchat_fileupload_s3_cdn: ""

    {% endif %}

    use_bot: "{{ params.main.use_bot }}"
    hubot_room: "{{ var_hubot_room }}"
    hubot_user: "{{ var_hubot_user }}"
    hubot_password: "{{ var_hubot_password }}"
    hubot_bot_name: "{{ var_hubot_bot_name }}"

    {% endif %}

    db_name: "{{ params.credentials.rocketchat.db.name }}"
    db_user: "{{ params.credentials.rocketchat.db.user }}"
    db_password: "{{ params.credentials.rocketchat.db.password }}"
    db_oplog_password: "{{ params.credentials.rocketchat.db.oploguser_password }}"

    {% if var_pod_type in ['app', 'db'] %}

    db_root_user: "{{ params.credentials.rocketchat.db.root_user }}"
    db_root_pass: "{{ params.credentials.rocketchat.db.root_password }}"

    {% endif %}

    s3_backup_access_key: "{{ params.credentials.rocketchat_backup_bucket.access_key }}"
    s3_backup_secret_key: "{{ params.credentials.rocketchat_backup_bucket.secret_key }}"

    {% if var_pod_type in ['app', 'web'] %}

    s3_uploads_access_key: "{{ params.credentials.rocketchat_uploads_bucket.access_key }}"
    s3_uploads_secret_key: "{{ params.credentials.rocketchat_uploads_bucket.secret_key }}"

    container_mem_nginx: "{{ params.main.custom_memory.nginx }}"
    container_mem_rocketchat: "{{ params.main.custom_memory.rocketchat }}"
    container_mem_hubot: "{{ var_container_mem_hubot }}"
    container_mem_mongo_express: "{{ params.main.custom_memory.mongo_express }}"

    {% endif %}

    {% if var_pod_type in ['app', 'db'] %}

    container_mem_mongo: "{{ params.main.custom_memory.mongo }}"
    container_mem_mongo_init: "{{ params.main.custom_memory.mongo_init }}"

    {% endif %}

    container_mem_toolbox: "{{ params.main.custom_memory.toolbox }}"
    container_mem_s3_backup: "{{ params.main.custom_memory.s3_backup }}"

    {% if var_pod_type in ['app', 'web'] %}

    container_mem_s3_uploads: "{{ params.main.custom_memory.s3_uploads }}"

    use_certbot: "{{ params.main.use_certbot }}"

    {% if params.main.use_certbot | bool %}

    certbot_image: "{{ params.main.custom_images.certbot_image }}"
    certbot_version: "{{ params.main.custom_images.certbot_version }}"
    container_mem_certbot: "{{ params.main.custom_memory.certbot }}"

    {% endif %}

    {% endif %}

    {% if not var_local_dev %}

    fluentd_image: "{{ params.main.custom_images.fluentd_image }}"
    fluentd_version: "{{ params.main.custom_images.fluentd_version }}"
    fluentd_port: "{{ params.main.custom_args.fluentd.port }}"
    container_mem_fluentd: "{{ params.main.custom_memory.fluentd }}"

    {% set var_fluentd_output_plugin = params.main.custom_args.fluentd.output_plugin
      | default(
        (var_pod_type in ['app']) | ternary('file', 'elasticsearch')
      )
    %}

    fluentd_output_plugin: "{{ var_fluentd_output_plugin }}"

    {% if var_fluentd_output_plugin == 'elasticsearch' %}

    elasticsearch_host_ip: "{{ params.dependencies_node_ip_dict['elasticsearch'] }}"

    {% endif %}

    {% endif %}

{% if var_pod_type in ['app', 'web'] %}

{% if not params.main.custom_args.nginx.custom | default(false) | bool %}

- src: "{{ var_main_dir }}/templates/nginx/nginx.conf"
  dest: "{{ var_main_dir }}/env/nginx/nginx.conf"
  root: true
  params:
    worker_process: "{{ params.main.custom_args.nginx.worker_process | default('') }}"
    worker_connections: "{{ params.main.custom_args.nginx.worker_connections | default('') }}"
    log_format: "{{ params.main.custom_args.nginx.log_format | default('') }}"
    limit_req_zone_rate: "{{ params.main.custom_args.nginx.limit_req_zone_rate | default('') }}"
    web_cache: "{{ params.main.custom_args.nginx.web_cache | default('') }}"
    web_cache_max_size: "{{ params.main.custom_args.nginx.web_cache_max_size | default('') }}"
    web_cache_inactive: "{{ params.main.custom_args.nginx.web_cache_inactive | default('') }}"
    proxy_connect_timeout: "{{ params.main.custom_args.nginx.proxy_connect_timeout | default('') }}"
    proxy_send_timeout: "{{ params.main.custom_args.nginx.proxy_send_timeout | default('') }}"
    proxy_read_timeout: "{{ params.main.custom_args.nginx.proxy_read_timeout | default('') }}"
    send_timeout: "{{ params.main.custom_args.nginx.send_timeout | default('') }}"
    client_body_timeout: "{{ params.main.custom_args.nginx.client_body_timeout | default('') }}"
    client_header_timeout: "{{ params.main.custom_args.nginx.client_header_timeout | default('') }}"
    main_domain: "{{ params.main.custom_domain.main_domain }}"
    main_port: "{{ var_main_domain_port }}"
    main_ssl: "{{ params.main.custom_domain.main_ssl }}"
    main: "{{ params.main.custom_args.nginx.main | default({}) }}"
    me_domain: "{{ params.main.custom_domain.me_domain }}"
    me_port: "{{ var_me_domain_port }}"
    me_ssl: "{{ params.main.custom_domain.me_ssl }}"

{% endif %}

{% endif %}

{% if var_pod_type in ['app', 'db'] %}

- src: "{{ var_main_dir }}/templates/mongo/init.js"
  dest: "{{ var_main_dir }}/env/mongo/init.js"
  root: true
  params:
    db_name: "{{ params.credentials.rocketchat.db.name }}"
    db_user: "{{ params.credentials.rocketchat.db.user }}"
    db_password: "{{ params.credentials.rocketchat.db.password }}"
    viewer_password: "{{ params.credentials.rocketchat.db.viewer_password }}"
    oploguser_password: "{{ params.credentials.rocketchat.db.oploguser_password }}"

{% endif %}

children:

- name: "main/scripts/vars.run.yml"
  params:
    env_params: {{ params | to_json }}
    pod_custom_dir: "{{ var_main_dir }}"
    run: {{ var_run | to_json }}
    run_tasks: {{ var_run_tasks | to_json }}
    run_dict: {{ var_run_dict | to_json }}
    run_tasks_dict: {{ var_run_tasks_dict | to_json }}
    run_custom:
      var_orchestration__main_file: "{{ var_orchestration_main_file }}"
      var_orchestration__run_file: "{{ var_orchestration_run_file }}"
      var_custom__pod_type: "{{ var_pod_type }}"
      var_custom__local: "{{ var_local | bool | ternary('true', 'false') }}"
      var_custom__local_dev: "{{ var_local_dev | bool | ternary('true', 'false') }}"
      var_custom__db_name: "{{ params.credentials.rocketchat.db.name }}"
      var_custom__user_name: "{{ params.credentials.rocketchat.db.root_user }}"
      var_custom__user_pass: "{{ params.credentials.rocketchat.db.root_password }}"

      {% if var_pod_type in ['app', 'web'] %}

      var_custom__use_certbot: "{{ params.main.use_certbot | bool | ternary('true', 'false') }}"

      {% endif %}
