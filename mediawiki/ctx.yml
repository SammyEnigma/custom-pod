## general vars - start ###

{% set var_local = params.local | default(false) | bool %}
{% set var_pod_type = params.type | default('') %}

{% if not (var_pod_type in ['app']) %}
  {% set error = {} %}
  {{ error['error.pod_type.invalid.' + var_pod_type] }}
{% endif %}

{% set var_pod_kind = 'mediawiki' %}

{% set var_main_base_dir = params.custom_dir %}
{% set var_main_dir = var_main_base_dir + '/' + var_pod_kind %}
{% set var_main_base_dir_container = (var_local and (params.custom_dir_sync | default(false) | bool))
  | ternary(var_main_base_dir + '-sync', var_main_base_dir)
%}
{% set var_main_dir_container = var_main_base_dir_container + '/' + var_pod_kind %}
{% set var_shared_dir = 'shared' %}

{% set var_data_dir = input.data_dir %}

{% set var_custom_ssl_main_domain = params.custom_ssl.main_domain | default('') %}
{% set var_custom_ssl_fullchain = params.custom_ssl.fullchain | default('') %}
{% set var_custom_ssl_privkey = params.custom_ssl.privkey | default('') %}
{% set var_use_custom_ssl = (var_custom_ssl_main_domain != '')
  and (var_custom_ssl_fullchain != '')
  and (var_custom_ssl_privkey != '')
%}

{% set var_main_domain_port = params.custom_domain.main_ssl | bool |
  ternary(params.custom_domain.public_https_port, params.custom_domain.public_http_port)
%}

{% if params.use_pma | bool %}
  {% set var_pma_domain_port = params.custom_domain.pma_ssl | bool |
    ternary(params.custom_domain.private_https_port, params.custom_domain.private_http_port)
  %}
{% endif %}

{% if params.use_adminer | bool %}
  {% set var_adminer_domain_port = params.custom_domain.adminer_ssl | bool |
    ternary(params.custom_domain.private_https_port, params.custom_domain.private_http_port)
  %}
{% endif %}

{% if params.use_theia | bool %}
  {% set var_theia_domain_port = params.custom_domain.theia_ssl | bool |
    ternary(params.custom_domain.private_https_port, params.custom_domain.private_http_port)
  %}
{% endif %}

{% if params.use_minio_gateway | bool %}
  {% set var_minio_gateway_domain_port = params.custom_domain.minio_gateway_ssl | bool |
    ternary(params.custom_domain.private_https_port, params.custom_domain.private_http_port)
  %}
{% endif %}

{% if params.use_filestash | bool %}
  {% set var_filestash_domain_port = params.custom_domain.filestash_ssl | bool |
    ternary(params.custom_domain.private_https_port, params.custom_domain.private_http_port)
  %}
{% endif %}

{% if var_pod_type in ['app', 'web'] %}
  {% set var_db_gui_user = params.db_gui_root_user | default(false) | bool |
    ternary('root', 'viewer')
  %}
  {% set var_db_gui_password = params.db_gui_root_user | default(false) | bool |
    ternary(credentials.mediawiki.db.root_password,
      credentials.mediawiki.db.viewer_password)
  %}
{% endif %}

### main ###

env_files:

- when: false

{% if var_pod_type in ['app', 'web'] %}

{% if var_use_custom_ssl | bool %}

- src: "{{ var_custom_ssl_fullchain }}"
  dest: "env/nginx/ssl/live/{{ var_custom_ssl_main_domain }}/fullchain.pem"

- src: "{{ var_custom_ssl_privkey }}"
  dest: "env/nginx/ssl/live/{{ var_custom_ssl_main_domain }}/privkey.pem"

{% endif %}

- src: "{{ params.auth_file }}"
  dest: "env/nginx/conf/.htpasswd"

{% endif %}

templates:

{% set var_ctx_full_name = input.identifier %}
{% set var_use_prefix = params.use_pod_prefix | default(params.use_pod_full_prefix | default(false, true), true) | bool %}
{% set var_pod_prefix = params.use_pod_full_prefix | default(false) | ternary(var_ctx_full_name, input.pod_name) %}
{% set var_ctx_prefix_main = var_use_prefix | bool | ternary(var_pod_prefix + '-main-', '') %}
{% set var_ctx_prefix_run = var_use_prefix | bool | ternary(var_pod_prefix + '-run-', '') %}

- src: "{{ var_main_dir }}/templates/docker-compose.tpl.yml"
  dest: "docker-compose.yml"
  params:
    local: "{{ var_local | default(false) | bool | ternary('true', 'false') }}"
    main_dir: "{{ var_main_dir_container }}"
    pod_type: "{{ var_pod_type }}"
    named_volumes: "{{ params.named_volumes | default(false) }}"
    use_fluentd: "{{ params.use_fluentd }}"
    images: {{ params.custom_images | to_json }}
    memory: {{ params.custom_memory | to_json }}

    {% if var_pod_type in ['app', 'web'] %}

    use_varnish: "{{ params.use_varnish }}"
    use_pma: "{{ params.use_pma }}"
    use_adminer: "{{ params.use_adminer }}"
    use_theia: "{{ params.use_theia }}"
    use_minio_gateway: "{{ params.use_minio_gateway }}"
    use_filestash: "{{ params.use_filestash }}"
    use_custom_ssl: "{{ var_use_custom_ssl }}"
    use_certbot: "{{ params.use_certbot }}"

    {% endif %}

    {% if var_pod_type in ['app', 'cache'] %}

    use_redis: "{{ params.use_redis }}"
    use_memcached: "{{ params.use_memcached }}"

    {% endif %}

- src: "{{ var_main_dir }}/templates/docker-compose.tpl.run.yml"
  dest: "docker-compose.run.yml"
  params:
    local: "{{ var_local | default(false) | bool | ternary('true', 'false') }}"
    main_dir: "{{ var_main_dir_container }}"
    pod_type: "{{ var_pod_type }}"
    use_fluentd: "{{ params.use_fluentd }}"
    s3_cli: "{{ params.s3_cli }}"
    images: {{ params.custom_images | to_json }}
    memory: {{ params.custom_memory | to_json }}

    {% if var_pod_type in ['app', 'web'] %}

    use_certbot: "{{ params.use_certbot }}"

    {% endif %}

- src: "{{ var_main_dir }}/templates/docker-compose.env"
  dest: ".env"
  params:
    ctx_full_name: "{{ var_ctx_full_name }}"
    ctx_prefix_main: "{{ var_ctx_prefix_main }}"
    ctx_prefix_run: "{{ var_ctx_prefix_run }}"
    data_dir: "{{ var_data_dir }}"
    local: "{{ var_local | default(false) | bool | ternary('true', 'false') }}"
    type: "{{ var_pod_type }}"
    use_fluentd: "{{ params.use_fluentd }}"

    {% if var_pod_type in ['app', 'web'] %}

    public_http_port: "{{ params.custom_domain.public_http_port }}"
    public_https_port: "{{ params.custom_domain.public_https_port }}"
    private_http_port: "{{ params.custom_domain.private_http_port }}"
    private_https_port: "{{ params.custom_domain.private_https_port }}"

    {% endif %}

    db_port: "{{ params.custom_args.mysql.port | default('3306', true) }}"
    db_name: "{{ credentials.mediawiki.db.name }}"
    db_user: "{{ credentials.mediawiki.db.user }}"
    db_password: "{{ credentials.mediawiki.db.password }}"

    {% if var_pod_type in ['app', 'db'] %}

    db_root_password: "{{ credentials.mediawiki.db.root_password }}"

    {% endif %}

    {% if var_pod_type in ['app', 'web'] %}

    use_certbot: "{{ params.use_certbot }}"
    use_minio_gateway: "{{ params.use_minio_gateway }}"

    {% if params.use_minio_gateway | bool %}

    minio_gateway_endpoint: "{{ credentials.minio_gateway.endpoint }}"
    minio_gateway_access_key: "{{ credentials.minio_gateway.access_key }}"
    minio_gateway_secret_key: "{{ credentials.minio_gateway.secret_key }}"

    {% endif %}

    use_pma: "{{ params.use_pma }}"

    {% if params.use_pma | bool %}

    pma_user: "{{ var_db_gui_user }}"
    pma_password: "{{ var_db_gui_password }}"
    pma_login_cookie_validity: >-
      {{ params.custom_args.pma.login_cookie_validity | default('36000') }}

    {% endif %}

    use_adminer: "{{ params.use_adminer }}"

    {% if params.use_adminer | bool %}

    adminer_user: "{{ var_db_gui_user }}"
    adminer_password: "{{ var_db_gui_password }}"

    {% endif %}

    {% endif %}

    {% if var_pod_type in ['web'] %}

    {% if var_local | bool %}

    db_host_ip: ""

    {% else %}

    db_host_ip: "{{ input.dependencies.mysql.host }}"

    {% endif %}

    {% endif %}

    {% if params.use_fluentd %}

    fluentd_port: "{{ params.custom_args.fluentd.port }}"

    {% set var_fluentd_output_plugin = params.custom_args.fluentd.output_plugin
      | default(
        (var_pod_type in ['app']) | ternary('file', 'elasticsearch')
      )
    %}

    fluentd_output_plugin: "{{ var_fluentd_output_plugin }}"

    {% if var_fluentd_output_plugin == 'elasticsearch' %}

    elasticsearch_host_ip: "{{ input.dependencies.elasticsearch.host }}"

    {% endif %}

    {% endif %}

{% if var_pod_type in ['app', 'web'] %}

{% if not params.custom_args.nginx.custom | default(false) | bool %}

- src: "{{ var_main_dir }}/templates/nginx/nginx.conf"
  dest: "env/nginx/nginx.conf"
  params:
    conf: {{ params.custom_args.nginx.conf | default({}) | to_json }}
    enable_validate_origin: "{{ params.custom_args.nginx.enable_validate_origin }}"
    main_domain: "{{ params.custom_domain.main_domain }}"
    main_port: "{{ var_main_domain_port }}"
    main_ssl: "{{ params.custom_domain.main_ssl }}"
    main: "{{ params.custom_args.nginx.main | default({}) }}"
    use_varnish: "{{ params.use_varnish }}"
    use_theia: "{{ params.use_theia }}"

    {% if params.use_theia | bool %}

    theia_domain: "{{ params.custom_domain.theia_domain }}"
    theia_port: "{{ var_theia_domain_port }}"
    theia_ssl: "{{ params.custom_domain.theia_ssl }}"

    {% endif %}

    use_minio_gateway: "{{ params.use_minio_gateway }}"

    {% if params.use_minio_gateway | bool %}

    minio_gateway_domain: "{{ params.custom_domain.minio_gateway_domain }}"
    minio_gateway_port: "{{ var_minio_gateway_domain_port }}"
    minio_gateway_ssl: "{{ params.custom_domain.minio_gateway_ssl }}"

    {% endif %}

    use_filestash: "{{ params.use_filestash }}"

    {% if params.use_filestash | bool %}

    filestash_domain: "{{ params.custom_domain.filestash_domain }}"
    filestash_port: "{{ var_filestash_domain_port }}"
    filestash_ssl: "{{ params.custom_domain.filestash_ssl }}"

    {% endif %}

    use_pma: "{{ params.use_pma }}"

    {% if params.use_pma | bool %}

    pma_domain: "{{ params.custom_domain.pma_domain }}"
    pma_port: "{{ var_pma_domain_port }}"
    pma_ssl: "{{ params.custom_domain.pma_ssl }}"

    {% endif %}

    use_adminer: "{{ params.use_adminer }}"

    {% if params.use_adminer | bool %}

    adminer_domain: "{{ params.custom_domain.adminer_domain }}"
    adminer_port: "{{ var_adminer_domain_port }}"
    adminer_ssl: "{{ params.custom_domain.adminer_ssl }}"

    {% endif %}

{% endif %}

{% if params.use_varnish | bool %}

- src: "{{ var_main_dir }}/templates/varnish/default.vcl"
  dest: "env/varnish/default.vcl"
  params: {}

{% endif %}

{% set var_server = (params.custom_domain.main_ssl | bool) |
  ternary('https', 'http') + '://' +
  params.custom_domain.main_domain
  + (not (var_main_domain_port in ['80', '443'])) |
  ternary(':' + var_main_domain_port, '')
%}

- src: "{{ var_main_dir }}/templates/mediawiki/LocalSettings.php"
  dest: "env/mediawiki/LocalSettings.php"
  mode: "666"
  params:
    sitename: "{{ params.mediawiki.sitename }}"
    meta_namespace: "{{ params.mediawiki.meta_namespace }}"
    server: "{{ var_server }}"
    logo: "{{ params.mediawiki.logo }}"
    emergency_contact: "{{ params.mediawiki.emergency_contact }}"
    password_sender: "{{ params.mediawiki.password_sender }}"
    db_server: "mysql"
    db_name: "{{ credentials.mediawiki.db.name }}"
    db_user: "{{ credentials.mediawiki.db.user }}"
    db_password: "{{ credentials.mediawiki.db.password }}"
    lang: "{{ params.mediawiki.lang }}"
    secret_key: "{{ credentials.mediawiki.secret_key }}"
    authentication_token_version: "{{ params.mediawiki.authentication_token_version }}"
    upload_path: "{{ params.mediawiki.upload_path | default('') }}"
    use_s3_storage: "{{ params.use_s3_storage }}"

    {% if params.use_s3_storage | bool %}

    s3_key: ""
    s3_secret: ""
    s3_endpoint: "{{ credentials.uploads_bucket.endpoint | default('') }}"
    s3_region: "{{ credentials.uploads_bucket.region | default('') }}"
    s3_bucket: "{{ params.uploads_bucket_name }}"
    s3_path: "{{ params.uploads_bucket_path | default('') }}"

    {% endif %}

    disable_logs: "{{ params.disable_logs | default(false) }}"
    debug_logs: "{{ params.debug_logs | default(false) }}"
    use_varnish: "{{ params.use_varnish }}"
    use_redis: "{{ params.use_redis }}"
    use_memcached: "{{ params.use_memcached }}"

{% endif %}

{% if var_pod_type in ['app', 'db'] %}

- src: "{{ var_shared_dir }}/templates/mysql/init.sql"
  dest: "env/mysql/init.sql"
  params:
    viewer_password: "{{ credentials.mediawiki.db.viewer_password }}"
    db_name: "{{ credentials.mediawiki.db.name }}"
    db_user: "{{ credentials.mediawiki.db.user }}"
    db_password: "{{ credentials.mediawiki.db.password }}"

{% endif %}

{% if params.s3_cli == 'awscli' %}
  {% set var_s3_config_src = var_shared_dir + '/templates/awscli/credentials.ini' %}
  {% set var_s3_config_dest = 'env/awscli/credentials.ini' %}
{% elif params.s3_cli == 'rclone' %}
  {% set var_s3_config_src = var_shared_dir + '/templates/rclone/rclone.conf' %}
  {% set var_s3_config_dest = 'env/rclone/rclone.conf' %}
{% elif params.s3_cli == 'mc' %}
  {% set var_s3_config_src = var_shared_dir + '/templates/mc/config.json.j2' %}
  {% set var_s3_config_dest = 'env/mc/config.json' %}
{% endif %}

- src: "{{ var_s3_config_src }}"
  dest: "{{ var_s3_config_dest }}"
  params:
    - alias: "backup"
      endpoint: "{{ credentials.backup_bucket.endpoint }}"
      region: "{{ credentials.backup_bucket.region | default('') }}"
      access_key: "{{ credentials.backup_bucket.access_key }}"
      secret_key: "{{ credentials.backup_bucket.secret_key }}"
    - alias: "uploads"
      endpoint: "{{ credentials.uploads_bucket.endpoint }}"
      region: "{{ credentials.uploads_bucket.region | default('') }}"
      access_key: "{{ credentials.uploads_bucket.access_key }}"
      secret_key: "{{ credentials.uploads_bucket.secret_key }}"
      when: "{{ var_pod_type in ['app', 'web'] }}"
    - alias: "backup_replica"
      endpoint: "{{ credentials.backup_replica_bucket.endpoint }}"
      region: "{{ credentials.backup_replica_bucket.region | default('') }}"
      access_key: "{{ credentials.backup_replica_bucket.access_key }}"
      secret_key: "{{ credentials.backup_replica_bucket.secret_key }}"
      when: "{{ (params.enable_backup_replica | bool) and (var_pod_type in ['app', 'web']) }}"
    - alias: "uploads_replica"
      endpoint: "{{ credentials.uploads_replica_bucket.endpoint }}"
      region: "{{ credentials.uploads_replica_bucket.region | default('') }}"
      access_key: "{{ credentials.uploads_replica_bucket.access_key }}"
      secret_key: "{{ credentials.uploads_replica_bucket.secret_key }}"
      when: "{{ (params.enable_uploads_replica | bool) and (var_pod_type in ['app', 'web']) }}"

- src: "main/vars/vars.tpl.sh"
  dest: "vars.sh"
  mode: '{{ var_local | ternary(0666, 0640) }}'
  params:
    var_ctx_full_name: "{{ var_ctx_full_name }}"

    {% if var_local | bool %}

    var_data_dir_rel: "{{ input.data_dir }}"

    {% else %}

    var_data_dir: "{{ input.data_dir }}"

    {% endif %}

    var_shared__script_dir: "{{ var_shared_dir }}/scripts"
    var_shared__delete_old__days: "3"
    var_custom__pod_type: "{{ var_pod_type }}"
    var_custom__local: "{{ var_local | bool | ternary('true', 'false') }}"
    var_custom__use_main_network: "true"
    var_custom__use_logrotator: "true"
    var_custom__use_nginx: "true"
    var_custom__use_mysql: "true"
    var_custom__use_fluentd: "{{ params.use_fluentd | bool | ternary('true', 'false') }}"

    {% if var_pod_type in ['app', 'web'] %}

    {% if params.enable_backup_replica | bool %}

    var_shared__s3_replicate_backup__bucket_dest_name: "{{ params.backup_replica_bucket_name }}"
    var_shared__s3_replicate_backup__bucket_dest_path: "{{ params.backup_replica_bucket_path | default('') }}"

    {% endif %}

    {% if params.enable_uploads_replica | bool %}

    var_shared__s3_replicate_uploads__bucket_dest_name: "{{ params.uploads_replica_bucket_name }}"
    var_shared__s3_replicate_uploads__bucket_dest_path: "{{ params.uploads_replica_bucket_path | default('') }}"

    {% endif %}

    var_custom__use_theia: "{{ params.use_theia | bool | ternary('true', 'false') }}"
    var_custom__use_varnish: "{{ params.use_varnish | bool | ternary('true', 'false') }}"
    var_custom__use_custom_ssl: "{{ var_use_custom_ssl | bool | ternary('true', 'false') }}"
    var_custom__use_certbot: "{{ params.use_certbot | bool | ternary('true', 'false') }}"

    var_custom__block_ips: "{{ params.block_ips | bool | ternary('true', 'false') }}"

    {% if params.block_ips | bool %}

    var_shared__block_ips__action_exec__max_amount: "{{ params.block_ips.max_amount | default('10000') }}"
    var_shared__block_ips__action_exec__amount_day: "{{ params.block_ips.amount_day | default('20000') }}"
    var_shared__block_ips__action_exec__amount_hour: "{{ params.block_ips.amount_hour | default('3600') }}"

    {% endif %}

    {% endif %}

    {% if not (params.log_summary.disabled | default(false) | bool) %}

    var_custom__log_summary__days_ago: "{{ params.log_summary.days_ago | default('1') }}"
    var_custom__log_summary__max_amount: "{{ params.log_summary.max_amount | default('100') }}"
    var_custom__log_summary__verify_size_docker_dir: >-
      {{ params.log_summary.verify_size_docker_dir | default(false) | bool | ternary('true', 'false') }}
    var_custom__log_summary__verify_size_containers: >-
      {{ params.log_summary.verify_size_containers | default(true) | bool | ternary('true', 'false') }}

    {% endif %}

    # General

    var_run__general__backup_is_delete_old: "true"
    var_run__general__main_base_dir: "{{ var_main_base_dir }}"
    var_run__general__main_base_dir_container: "{{ var_main_base_dir_container }}"
    var_run__general__orchestration: "compose"
    var_run__general__script_dir: "{{ var_main_dir }}/scripts"
    var_run__general__script_env_file: "{{ var_local | bool | ternary('local.sh', 'remote.sh') }}"
    var_run__general__toolbox_service: "toolbox"
    var_run__migrate__db_service: "mysql"
    var_run__migrate__db_name: "{{ credentials.mediawiki.db.name }}"
    var_run__migrate__db_user: "{{ credentials.mediawiki.db.user }}"
    var_run__migrate__db_pass: "{{ credentials.mediawiki.db.password }}"
    var_run__migrate__db_connect_wait_secs: "{{ params.migrate.db_connect_wait_secs | default('300') }}"
    var_run__tasks__backup: "group_backup"
    var_run__tasks__setup: "group_setup"

    # Tasks (Group)

    {% set var_group_backup = [] %}

    {% if var_pod_type in ['app', 'db'] %}

      {% if params.enable_db_backup | bool %}

        {% set var_group_backup = var_group_backup + ['db_backup'] %}

      {% endif %}

    {% endif %}

    {% if (var_pod_type in ['app', 'web']) and (not (params.use_s3_storage | bool)) %}

      {% if params.enable_uploads_backup | bool %}

        {% set var_group_backup = var_group_backup + ['uploads_backup'] %}

      {% endif %}

    {% endif %}

    var_task__group_backup__group_task__task_names: "{{ var_group_backup | join(',') }}"
    var_task__group_backup__task__type: "group"

    {% set var_group_setup = [] %}

    {% if params.restore_db | bool %}

      {% if (var_pod_type in ['app', 'web']) and (not (params.use_s3_storage | bool)) %}

        {% if params.enable_uploads_setup | bool %}

          {% set var_group_setup = var_group_setup + ['uploads_setup'] %}

        {% endif %}

      {% endif %}

      {% if var_pod_type in ['app', 'db'] %}

        {% if params.enable_db_setup | bool %}

          {% set var_group_setup = var_group_setup + ['db_setup'] %}

        {% endif %}

      {% endif %}

    {% endif %}

    var_task__group_setup__group_task__task_names: "{{ var_group_setup | join(',') }}"
    var_task__group_setup__task__type: "group"

    # Tasks (Specific)

    {% if var_pod_type in ['app', 'web'] %}

    {% if params.use_certbot | bool %}

    var_task__certbot__certbot_subtask__certbot_service: "certbot"
    var_task__certbot__certbot_subtask__data_base_path: "/var/main/data/sync/certbot"
    var_task__certbot__certbot_subtask__dev: "{{ params.certbot.dev | default(var_local) | bool | ternary('true', 'false') }}"
    var_task__certbot__certbot_subtask__domains: "{{ params.certbot.domains }}"
    var_task__certbot__certbot_subtask__email: "{{ params.certbot.email }}"
    var_task__certbot__certbot_subtask__force: "{{ params.certbot.force | bool | ternary('true', 'false') }}"
    var_task__certbot__certbot_subtask__main_domain: "{{ params.certbot.main_domain }}"
    var_task__certbot__certbot_subtask__rsa_key_size: "{{ params.certbot.rsa_key_size | default('4096') }}"
    var_task__certbot__certbot_subtask__staging: >-
      {{ params.certbot.staging | default(var_local) | bool | ternary('true', 'false') }}
    var_task__certbot__certbot_subtask__toolbox_service: "toolbox"
    var_task__certbot__certbot_subtask__webservice_type: "nginx"
    var_task__certbot__certbot_task__certbot_cmd: "setup"
    var_task__certbot__task__type: "certbot"

    {% endif %}

    {% endif %}

    {% if var_pod_type in ['app', 'db'] %}

    {% if params.enable_db_backup | bool %}

    {% set var_db_file_name = params.db_backup.db_file_name
      | default(credentials.mediawiki.db.name + '.sql')
    %}
    {% set var_db_compressed_file_name = params.db_backup.db_compressed_file_name
      | default(credentials.mediawiki.db.name + '.[[ datetime ]].[[ random ]].zip')
    %}
    {% set var_db_src_dir = '/tmp/main/tmp/mysql/backup' %}
    {% set var_db_tmp_dir = '/tmp/main/tmp/backup/mysql' %}
    {% set var_db_compress_type = params.db_backup.db_compress_type | default('zip') %}
    {% set var_db_compress_src_file = var_db_src_dir + '/' + var_db_file_name %}
    {% set var_db_compress_dest_file = var_db_tmp_dir + '/' + var_db_compressed_file_name %}
    {% set var_db_subtask_cmd_local = 'backup:local:db' %}
    {% set var_db_subtask_cmd_db = 'db:backup:file:mysql' %}
    {% set var_db_subtask_cmd_remote = 'backup:remote:default' %}
    {% set var_db_subtask_cmd_s3 = 's3:subtask:s3_backup' %}

    var_task__db_backup__task__type: "backup"
    var_task__db_backup__backup_task__subtask_cmd_local: "{{ var_db_subtask_cmd_local }}"
    var_task__db_backup__backup_task__subtask_cmd_remote: "{{ var_db_subtask_cmd_remote }}"
    var_task__db_backup__backup_task__is_compressed_file: >-
      {{ params.db_backup.is_compressed_file | default(false) | bool | ternary('true', 'false') }}

    {% if params.db_backup.is_compressed_file | default(false) | bool %}

    var_task__db_backup__backup_task__recursive_dir: "{{ var_db_src_dir }}"
    var_task__db_backup__backup_task__compress_type: "{{ var_db_compress_type }}"
    var_task__db_backup__backup_task__compress_dest_file: "{{ var_db_compress_dest_file }}"
    var_task__db_backup__backup_task__compress_pass: >-
      {{ credentials.mediawiki_db.compress_pass | default('') }}

    {% else %}

    var_task__db_backup__backup_task__recursive_dir: "{{ var_db_tmp_dir }}"

    {% endif %}

    var_task__db_backup__backup_task__backup_date_format: "{{ params.db_backup.backup_date_format | default('') }}"
    var_task__db_backup__backup_task__backup_time_format: "{{ params.db_backup.backup_time_format | default('') }}"
    var_task__db_backup__backup_task__backup_datetime_format: "{{ params.db_backup.backup_datetime_format | default('') }}"
    var_task__db_backup__backup_task__recursive_mode: "{{ params.db_backup.recursive_mode | default('') }}"
    var_task__db_backup__backup_task__recursive_mode_dir: "{{ params.db_backup.recursive_mode_dir | default('') }}"
    var_task__db_backup__backup_task__recursive_mode_file: "{{ params.db_backup.recursive_mode_file | default('') }}"
    var_task__db_backup__backup_task__file_to_clear: "{{ params.db_backup.file_to_clear | default('') }}"
    var_task__db_backup__backup_task__dir_to_clear: "{{ params.db_backup.dir_to_clear | default('') }}"
    var_task__db_backup__backup_local__db_file_name: "{{ var_db_file_name }}"
    var_task__db_backup__backup_local__db_task_base_dir: "{{ var_db_src_dir }}"
    var_task__db_backup__backup_local__db_subtask_cmd: "{{ var_db_subtask_cmd_db }}"
    var_task__db_backup__backup_local__task_name: "db_main"
    var_task__db_backup__backup_remote__backup_bucket_sync_dir: >-
      {{ params.db_backup.backup_bucket_sync_dir | default('[[ date ]]') }}
    var_task__db_backup__backup_remote__backup_date_format: "{{ params.db_backup.backup_date_format | default('') }}"
    var_task__db_backup__backup_remote__backup_time_format: "{{ params.db_backup.backup_time_format | default('') }}"
    var_task__db_backup__backup_remote__backup_datetime_format: "{{ params.db_backup.backup_datetime_format | default('') }}"
    var_task__db_backup__backup_remote__subtask_cmd_s3: "{{ var_db_subtask_cmd_s3 }}"

    {% endif %}

    {% endif %}

    var_task__db_main__db_subtask__db_connect_wait_secs: "{{ params.db_main.db_connect_wait_secs | default('300') }}"
    var_task__db_main__db_subtask__db_name: "{{ credentials.mediawiki.db.name }}"
    var_task__db_main__db_subtask__db_pass: "{{ credentials.mediawiki.db.password }}"
    var_task__db_main__db_subtask__db_service: "mysql"
    var_task__db_main__db_subtask__db_user: "{{ credentials.mediawiki.db.user }}"

    {% if var_pod_type in ['app', 'db'] %}

    {% if (params.restore_db | bool) and (params.enable_db_setup | bool) %}

    {% set var_db_dest_dir = '/tmp/main/tmp/mysql/restore' %}
    {% set var_verify_file_to_skip = params.db_setup.verify_file_to_skip | default('/tmp/main/setup/db.skip') %}
    {% set var_db_compress_type = params.db_setup.db_compress_type | default('zip') %}
    {% set var_db_compress_file_name = params.db_setup.db_compress_file_name
      | default(credentials.mediawiki.db.name + '.zip')
    %}
    {% set var_db_compress_file = '/tmp/main/tmp/restore/mysql/' + var_db_compress_file_name %}
    {% set var_db_file_name = params.db_setup.db_file_name
      | default(credentials.mediawiki.db.name + '.sql')
    %}
    {% set var_db_subtask_cmd_verify = 'setup:verify:db' %}
    {% set var_db_subtask_cmd_remote = 'setup:remote:default' %}
    {% set var_db_subtask_cmd_local = 'setup:local:db' %}
    {% set var_db_verify_cmd = 'db:restore:verify:mysql' %}
    {% set var_db_local_cmd = 'db:restore:file:mysql' %}

    var_task__db_setup__task__type: "setup"
    var_task__db_setup__setup_task__verify_file_to_skip: "{{ var_verify_file_to_skip }}"
    var_task__db_setup__setup_task__subtask_cmd_verify: "{{ var_db_subtask_cmd_verify }}"
    var_task__db_setup__setup_task__subtask_cmd_remote: "{{ var_db_subtask_cmd_remote }}"
    var_task__db_setup__setup_task__subtask_cmd_local: "{{ var_db_subtask_cmd_local }}"
    var_task__db_setup__setup_task__is_compressed_file: >-
      {{ params.db_setup.is_compressed_file | default(false) | bool | ternary('true', 'false') }}

    {% if params.db_setup.is_compressed_file | default(false) | bool %}

    var_task__db_setup__setup_task__compress_type: "{{ var_db_compress_type }}"
    var_task__db_setup__setup_task__compress_src_file: "{{ var_db_compress_file }}"
    var_task__db_setup__setup_task__compress_dest_dir: "{{ var_db_dest_dir }}"
    var_task__db_setup__setup_task__compress_pass: "{{ credentials.mediawiki_db.compress_pass | default('') }}"

    {% endif %}

    var_task__db_setup__setup_task__recursive_dir: "{{ var_db_dest_dir }}"
    var_task__db_setup__setup_task__recursive_mode: "{{ params.db_setup.recursive_mode | default('') }}"
    var_task__db_setup__setup_task__recursive_mode_dir: >-
      {{ params.db_setup.recursive_mode_dir | default('777') }}
    var_task__db_setup__setup_task__recursive_mode_file: >-
      {{ params.db_setup.recursive_mode_file | default('666') }}
    var_task__db_setup__setup_task__file_to_clear: >-
      {{ params.db_setup.file_to_clear | default(var_db_compress_file) }}
    var_task__db_setup__setup_task__dir_to_clear: "{{ var_db_dest_dir }}"
    var_task__db_setup__setup_verify__db_subtask_cmd: "{{ var_db_verify_cmd }}"
    var_task__db_setup__setup_verify__task_name: "db_main"
    var_task__db_setup__setup_remote__restore_use_s3: >-
      {{ params.db_setup.restore_use_s3 | bool | ternary('true', 'false') }}

    {% if not (params.db_setup.restore_use_s3 | bool) %}

    var_task__db_setup__setup_remote__restore_dest_file: "{{ var_db_compress_file }}"
    var_task__db_setup__setup_remote__restore_remote_file: "{{ params.db_setup.restore_remote_file }}"

    {% else %}

    var_task__db_setup__setup_remote__subtask_cmd_s3: "s3:subtask:s3_backup"
    var_task__db_setup__setup_remote__restore_s3_sync: >-
      {{ params.db_setup.restore_s3_sync | bool | ternary('true', 'false') }}

    {% if params.db_setup.restore_s3_sync | bool %}

    var_task__db_setup__setup_remote__restore_dest_dir: "{{ var_db_dest_dir }}"
    var_task__db_setup__setup_remote__restore_bucket_path_dir: >-
      {{ params.db_setup.restore_bucket_path_dir | default('') }}

    {% else %}

    var_task__db_setup__setup_remote__restore_dest_file: "{{ var_db_compress_file }}"
    var_task__db_setup__setup_remote__restore_bucket_path_file: >-
      {{ params.db_setup.restore_bucket_path_file | default('') }}

    {% endif %}

    {% endif %}

    var_task__db_setup__setup_local__db_file_name: "{{ var_db_file_name }}"
    var_task__db_setup__setup_local__db_subtask_cmd: "{{ var_db_local_cmd }}"
    var_task__db_setup__setup_local__db_task_base_dir: "{{ var_db_dest_dir }}"
    var_task__db_setup__setup_local__task_name: "db_main"

    {% endif %}

    {% endif %}

    {% if params.enable_logs_backup | bool %}

    var_task__logs_backup__task__type: "backup"
    var_task__logs_backup__backup_task__subtask_cmd_remote: "backup:remote:default"
    var_task__logs_backup__backup_remote__backup_bucket_sync_dir: "log/{{ var_pod_type }}"
    var_task__logs_backup__backup_remote__backup_src_dir: "/var/log/main"
    var_task__logs_backup__backup_remote__subtask_cmd_s3: "s3:subtask:s3_backup"

    {% endif %}

    {% if params.enable_logs_setup | bool %}

    {% set var_dest_dir = '/var/log/main' %}
    {% set var_verify_file_to_skip = params.logs_setup.verify_file_to_skip | default('/tmp/main/setup/logs.skip') %}

    var_task__logs_setup__task__type: "setup"
    var_task__logs_setup__setup_task__verify_file_to_skip: "{{ var_verify_file_to_skip }}"
    var_task__logs_setup__setup_task__subtask_cmd_remote: "setup:remote:default"
    var_task__logs_setup__setup_task__recursive_dir: "{{ var_dest_dir }}"
    var_task__logs_setup__setup_task__recursive_mode: "{{ params.logs_setup.recursive_mode | default('') }}"
    var_task__logs_setup__setup_task__recursive_mode_dir: >-
      {{ params.logs_setup.recursive_mode_dir | default('777') }}
    var_task__logs_setup__setup_task__recursive_mode_file: >-
      {{ params.logs_setup.recursive_mode_file | default('666') }}
    var_task__logs_setup__setup_verify__setup_dest_dir_to_verify: "{{ var_dest_dir }}"
    var_task__logs_setup__setup_remote__restore_use_s3: "true"
    var_task__logs_setup__setup_remote__subtask_cmd_s3: "s3:subtask:s3_backup"
    var_task__logs_setup__setup_remote__restore_s3_sync: "true"
    var_task__logs_setup__setup_remote__restore_dest_dir: "{{ var_dest_dir }}"
    var_task__logs_setup__setup_remote__restore_bucket_path_dir: >-
      {{ params.logs_setup.restore_bucket_path_dir | default('') }}

    {% endif %}

    var_task__s3_backup__s3_subtask__bucket_name: "{{ params.backup_bucket_name }}"
    var_task__s3_backup__s3_subtask__bucket_path: "{{ params.backup_bucket_path | default('') }}"
    var_task__s3_backup__s3_subtask__cli: "{{ params.s3_cli }}"
    var_task__s3_backup__s3_subtask__cli_cmd: "run"
    var_task__s3_backup__s3_subtask__tmp_dir: "/tmp/main/tmp/s3_backup"
    var_task__s3_backup__s3_subtask__endpoint: "{{ credentials.backup_bucket.endpoint }}"
    var_task__s3_backup__s3_subtask__service: "s3_cli"
    var_task__s3_backup__s3_subtask__alias: "backup"


    {% if var_pod_type in ['app', 'web'] %}

    {% if params.enable_backup_replica | bool %}

    var_task__s3_backup_replica__s3_subtask__bucket_name: "{{ params.backup_bucket_name }}"
    var_task__s3_backup_replica__s3_subtask__bucket_path: "{{ params.backup_bucket_path | default('') }}"
    var_task__s3_backup_replica__s3_subtask__cli: "{{ params.s3_cli }}"
    var_task__s3_backup_replica__s3_subtask__cli_cmd: "run"
    var_task__s3_backup_replica__s3_subtask__tmp_dir: "/tmp/main/tmp/s3_backup_replica"
    var_task__s3_backup_replica__s3_subtask__endpoint: "{{ credentials.backup_bucket.endpoint }}"
    var_task__s3_backup_replica__s3_subtask__service: "s3_backup_replica"

    {% endif %}

    {% if params.enable_uploads_replica | bool %}

    var_task__s3_uploads_replica__s3_subtask__bucket_name: "{{ params.uploads_bucket_name }}"
    var_task__s3_uploads_replica__s3_subtask__bucket_path: "{{ params.uploads_bucket_path | default('') }}"
    var_task__s3_uploads_replica__s3_subtask__cli: "{{ params.s3_cli }}"
    var_task__s3_uploads_replica__s3_subtask__cli_cmd: "run"
    var_task__s3_uploads_replica__s3_subtask__tmp_dir: "/tmp/main/tmp/s3_uploads_replica"
    var_task__s3_uploads_replica__s3_subtask__endpoint: "{{ credentials.uploads_bucket.endpoint }}"
    var_task__s3_uploads_replica__s3_subtask__service: "s3_uploads_replica"

    {% endif %}

    var_task__s3_uploads__s3_subtask__bucket_name: "{{ params.uploads_bucket_name }}"
    var_task__s3_uploads__s3_subtask__bucket_path: "{{ params.uploads_bucket_path | default('') }}"
    var_task__s3_uploads__s3_subtask__cli: "{{ params.s3_cli }}"
    var_task__s3_uploads__s3_subtask__cli_cmd: "run"
    var_task__s3_uploads__s3_subtask__tmp_dir: "/tmp/main/tmp/s3_uploads"
    var_task__s3_uploads__s3_subtask__endpoint: "{{ credentials.uploads_bucket.endpoint }}"
    var_task__s3_uploads__s3_subtask__service: "s3_cli"
    var_task__s3_uploads__s3_subtask__alias: "uploads"

    {% endif %}

    {% if params.enable_sync_backup | bool %}

    var_task__sync_backup__task__type: "backup"
    var_task__sync_backup__backup_task__subtask_cmd_remote: "backup:remote:default"
    var_task__sync_backup__backup_remote__backup_bucket_sync_dir: "sync"
    var_task__sync_backup__backup_remote__backup_src_dir: "/var/sync/main"
    var_task__sync_backup__backup_remote__subtask_cmd_s3: "s3:subtask:s3_backup"

    {% endif %}

    {% if params.enable_sync_setup | bool %}

    {% set var_dest_dir = '/var/sync/main' %}
    {% set var_verify_file_to_skip = params.sync_setup.verify_file_to_skip | default('/tmp/main/setup/sync.skip') %}

    var_task__sync_setup__task__type: "setup"
    var_task__sync_setup__setup_task__verify_file_to_skip: "{{ var_verify_file_to_skip }}"
    var_task__sync_setup__setup_task__subtask_cmd_remote: "setup:remote:default"
    var_task__sync_setup__setup_task__recursive_dir: "{{ var_dest_dir }}"
    var_task__sync_setup__setup_task__recursive_mode: "{{ params.sync_setup.recursive_mode | default('') }}"
    var_task__sync_setup__setup_task__recursive_mode_dir: >-
      {{ params.sync_setup.recursive_mode_dir | default('777') }}
    var_task__sync_setup__setup_task__recursive_mode_file: >-
      {{ params.sync_setup.recursive_mode_file | default('666') }}
    var_task__sync_setup__setup_verify__setup_dest_dir_to_verify: "{{ var_dest_dir }}"
    var_task__sync_setup__setup_remote__restore_use_s3: "true"
    var_task__sync_setup__setup_remote__subtask_cmd_s3: "s3:subtask:s3_backup"
    var_task__sync_setup__setup_remote__restore_s3_sync: "true"
    var_task__sync_setup__setup_remote__restore_dest_dir: "{{ var_dest_dir }}"
    var_task__sync_setup__setup_remote__restore_bucket_path_dir: >-
      {{ params.sync_setup.restore_bucket_path_dir | default('') }}

    {% endif %}

    {% if (var_pod_type in ['app', 'web']) and (not (params.use_s3_storage | bool)) %}

    {% if params.enable_uploads_backup | bool %}

    {% set var_uploads_src_dir = '/var/main/data/mediawiki/uploads' %}
    {% set var_uploads_tmp_dir = '/tmp/main/tmp/backup/uploads' %}
    {% set var_uploads_compress_type = params.uploads_backup.compress_type | default('zip') %}
    {% set var_uploads_compressed_file_name = params.uploads_backup.compressed_file_name
      | default('uploads.[[ datetime ]].[[ random ]].zip')
    %}
    {% set var_uploads_compress_dest_file = var_uploads_tmp_dir + '/' + var_uploads_compressed_file_name %}
    {% set var_uploads_subtask_cmd_remote = 'backup:remote:default' %}
    {% set var_uploads_subtask_cmd_s3 = 's3:subtask:s3_uploads' %}

    var_task__uploads_backup__task__type: "backup"
    var_task__uploads_backup__backup_task__backup_src: "{{ var_uploads_src_dir }}"
    var_task__uploads_backup__backup_task__subtask_cmd_remote: "{{ var_uploads_subtask_cmd_remote }}"
    var_task__uploads_backup__backup_task__is_compressed_file: >-
      {{ params.uploads_backup.is_compressed_file | default(false) | bool | ternary('true', 'false') }}

    {% if params.uploads_backup.is_compressed_file | default(false) | bool %}

    var_task__uploads_backup__backup_task__compress_type: "{{ var_uploads_compress_type }}"
    var_task__uploads_backup__backup_task__compress_dest_file: "{{ var_uploads_compress_dest_file }}"
    var_task__uploads_backup__backup_task__compress_pass: >-
      {{ credentials.mediawiki_uploads.compress_pass | default('') }}

    {% endif %}

    var_task__uploads_backup__backup_task__backup_date_format: "{{ params.uploads_backup.backup_date_format | default('') }}"
    var_task__uploads_backup__backup_task__backup_time_format: "{{ params.uploads_backup.backup_time_format | default('') }}"
    var_task__uploads_backup__backup_task__backup_datetime_format: >-
      {{ params.uploads_backup.backup_datetime_format | default('') }}
    var_task__uploads_backup__backup_task__recursive_dir: "{{ var_uploads_tmp_dir }}"
    var_task__uploads_backup__backup_task__recursive_mode: "{{ params.uploads_backup.recursive_mode | default('') }}"
    var_task__uploads_backup__backup_task__recursive_mode_dir: "{{ params.uploads_backup.recursive_mode_dir | default('') }}"
    var_task__uploads_backup__backup_task__recursive_mode_file: "{{ params.uploads_backup.recursive_mode_file | default('') }}"
    var_task__uploads_backup__backup_task__file_to_clear: "{{ params.uploads_backup.file_to_clear | default('') }}"
    var_task__uploads_backup__backup_task__dir_to_clear: "{{ params.uploads_backup.dir_to_clear | default('') }}"
    var_task__uploads_backup__backup_remote__backup_bucket_sync_dir:  >-
      {{ params.uploads_backup.backup_bucket_sync_dir | default('[[ date ]]') }}
    var_task__uploads_backup__backup_remote__subtask_cmd_s3: "{{ var_uploads_subtask_cmd_s3 }}"
    var_task__uploads_backup__backup_remote__backup_date_format: "{{ params.uploads_backup.backup_date_format | default('') }}"
    var_task__uploads_backup__backup_remote__backup_time_format: "{{ params.uploads_backup.backup_time_format | default('') }}"
    var_task__uploads_backup__backup_remote__backup_datetime_format: >-
      {{ params.uploads_backup.backup_datetime_format | default('') }}

    {% endif %}

    {% if (params.restore_db | bool) and (params.enable_uploads_setup | bool) %}

    {% set var_uploads_s3_sync = (params.uploads_setup.restore_use_s3 | bool)
      and (params.uploads_setup.restore_s3_sync | bool)
    %}
    {% set var_uploads_dest_dir = '/var/main/data/mediawiki/uploads' %}
    {% set var_verify_file_to_skip = params.db_setup.verify_file_to_skip | default('/tmp/main/setup/uploads.skip') %}
    {% set var_uploads_tmp_base_dir = '/tmp/main/tmp/mediawiki' %}
    {% set var_uploads_compress_type = params.uploads_setup.compress_type | default('zip') %}
    {% set var_uploads_compressed_file_name = params.uploads_setup.compressed_file_name | default('uploads.zip') %}
    {% set var_uploads_compress_file = '/tmp/main/tmp/restore/uploads/' + var_uploads_compressed_file_name %}

    var_task__uploads_setup__task__type: "setup"
    var_task__uploads_setup__setup_task__verify_file_to_skip: "{{ var_verify_file_to_skip }}"
    var_task__uploads_setup__setup_task__subtask_cmd_remote: "setup:remote:default"
    var_task__uploads_setup__setup_task__is_compressed_file: >-
      {{ params.uploads_setup.is_compressed_file | default(false) | bool | ternary('true', 'false') }}

    {% if params.uploads_setup.is_compressed_file | default(false) | bool %}

    var_task__uploads_setup__setup_task__compress_type: "{{ var_uploads_compress_type }}"
    var_task__uploads_setup__setup_task__compress_src_file: "{{ var_uploads_compress_file }}"
    var_task__uploads_setup__setup_task__compress_dest_dir: "{{ var_uploads_tmp_base_dir }}"
    var_task__uploads_setup__setup_task__compress_pass: >-
      {{ credentials.mediawiki_uploads.compress_pass | default('') }}

    {% endif %}

    var_task__uploads_setup__setup_task__recursive_mode: "{{ params.uploads_setup.recursive_mode | default('') }}"
    var_task__uploads_setup__setup_task__recursive_mode_dir: "{{ params.uploads_setup.recursive_mode_dir | default('777') }}"
    var_task__uploads_setup__setup_task__recursive_mode_file: "{{ params.uploads_setup.recursive_mode_file | default('666') }}"

    {% if not var_uploads_s3_sync | bool %}

    {% set var_uploads_tmp_dir = var_uploads_tmp_base_dir + '/'
      + params.uploads_setup.restore_compressed_inner_dir
    %}

    var_task__uploads_setup__setup_task__recursive_dir: "{{ var_uploads_tmp_dir }}"
    var_task__uploads_setup__setup_task__move_src: "{{ var_uploads_tmp_dir }}"
    var_task__uploads_setup__setup_task__move_dest: "{{ var_uploads_dest_dir }}"
    var_task__uploads_setup__setup_task__file_to_clear: ""
    var_task__uploads_setup__setup_task__dir_to_clear: "{{ var_uploads_tmp_dir }}"

    {% else %}

    var_task__uploads_setup__setup_task__recursive_dir: "{{ var_uploads_dest_dir }}"

    {% endif %}

    var_task__uploads_setup__setup_verify__setup_dest_dir_to_verify: "{{ var_uploads_dest_dir }}"
    var_task__uploads_setup__setup_remote__restore_use_s3: >-
      {{ params.uploads_setup.restore_use_s3 | bool | ternary('true', 'false') }}

    {% if not (params.uploads_setup.restore_use_s3 | bool) %}

    var_task__uploads_setup__setup_remote__restore_dest_file: >-
      {{ params.uploads_setup.restore_dest_file | default(var_uploads_compress_file) }}
    var_task__uploads_setup__setup_remote__restore_remote_file: >-
      {{ params.uploads_setup.restore_remote_file }}

    {% else %}

    var_task__uploads_setup__setup_remote__subtask_cmd_s3: "s3:subtask:s3_uploads"
    var_task__uploads_setup__setup_remote__restore_s3_sync: >-
      {{ params.uploads_setup.restore_s3_sync | bool | ternary('true', 'false') }}
    var_task__uploads_setup__setup_remote__restore_dest_dir: >-
      {{ params.uploads_setup.restore_dest_dir | default(var_uploads_dest_dir) }}
    var_task__uploads_setup__setup_remote__restore_dest_file: >-
      {{ params.uploads_setup.restore_dest_file | default('') }}
    var_task__uploads_setup__setup_remote__restore_bucket_path_dir: >-
      {{ params.uploads_setup.restore_bucket_path_dir | default('') }}
    var_task__uploads_setup__setup_remote__restore_bucket_path_file: >-
      {{ params.uploads_setup.restore_bucket_path_file | default('') }}

    {% endif %}

    {% endif %}

    {% endif %}