## general vars - start ###

{% set var_local = params.local | default(false) | bool %}
{% set var_pod_type = params.type | default('') %}

{% if not (var_pod_type in ['app']) %}
  {% set error = {} %}
  {{ error['error.pod_type.invalid.' + var_pod_type] }}
{% endif %}

{% set var_pod_kind = 'mediawiki' %}

{% set var_main_base_dir = params.custom_dir %}
{% set var_main_dir = var_main_base_dir + '/' + var_pod_kind %}
{% set var_main_base_dir_container = (var_local and (params.custom_dir_sync | default(false) | bool))
  | ternary(var_main_base_dir + '-sync', var_main_base_dir)
%}
{% set var_main_dir_container = var_main_base_dir_container + '/' + var_pod_kind %}
{% set var_shared_dir = 'shared' %}

{% set var_data_dir = input.data_dir %}

{% set var_custom_ssl_main_domain = params.custom_ssl.main_domain | default('') %}
{% set var_custom_ssl_fullchain = params.custom_ssl.fullchain | default('') %}
{% set var_custom_ssl_privkey = params.custom_ssl.privkey | default('') %}
{% set var_use_custom_ssl = (var_custom_ssl_main_domain != '')
  and (var_custom_ssl_fullchain != '')
  and (var_custom_ssl_privkey != '')
%}

{% set var_main_domain_port = params.custom_domain.main_ssl | bool |
  ternary(params.custom_domain.public_https_port, params.custom_domain.public_http_port)
%}

{% if params.use_pma | bool %}
  {% set var_pma_domain_port = params.custom_domain.pma_ssl | bool |
    ternary(params.custom_domain.private_https_port, params.custom_domain.private_http_port)
  %}
{% endif %}

{% if params.use_adminer | bool %}
  {% set var_adminer_domain_port = params.custom_domain.adminer_ssl | bool |
    ternary(params.custom_domain.private_https_port, params.custom_domain.private_http_port)
  %}
{% endif %}

{% if params.use_theia | bool %}
  {% set var_theia_domain_port = params.custom_domain.theia_ssl | bool |
    ternary(params.custom_domain.private_https_port, params.custom_domain.private_http_port)
  %}
{% endif %}

{% if params.use_minio_gateway | bool %}
  {% set var_minio_gateway_domain_port = params.custom_domain.minio_gateway_ssl | bool |
    ternary(params.custom_domain.private_https_port, params.custom_domain.private_http_port)
  %}
{% endif %}

{% if params.use_filestash | bool %}
  {% set var_filestash_domain_port = params.custom_domain.filestash_ssl | bool |
    ternary(params.custom_domain.private_https_port, params.custom_domain.private_http_port)
  %}
{% endif %}

{% if var_pod_type in ['app', 'web'] %}
  {% set var_db_gui_user = params.db_gui_root_user | default(false) | bool |
    ternary('root', 'viewer')
  %}
  {% set var_db_gui_password = params.db_gui_root_user | default(false) | bool |
    ternary(credentials.mediawiki.db.root_password,
      credentials.mediawiki.db.viewer_password)
  %}
{% endif %}

### main ###

env_files:

- when: false

{% if var_pod_type in ['app', 'web'] %}

{% if var_use_custom_ssl | bool %}

- src: "{{ var_custom_ssl_fullchain }}"
  dest: "env/nginx/ssl/live/{{ var_custom_ssl_main_domain }}/fullchain.pem"

- src: "{{ var_custom_ssl_privkey }}"
  dest: "env/nginx/ssl/live/{{ var_custom_ssl_main_domain }}/privkey.pem"

{% endif %}

- src: "{{ params.auth_file }}"
  dest: "env/nginx/conf/.htpasswd"

{% endif %}

templates:

{% set var_ctx_full_name = input.identifier %}
{% set var_use_prefix = params.use_pod_prefix | default(params.use_pod_full_prefix | default(false, true), true) | bool %}
{% set var_pod_prefix = params.use_pod_full_prefix | default(false) | ternary(var_ctx_full_name, input.pod_name) %}
{% set var_ctx_prefix_main = var_use_prefix | bool | ternary(var_pod_prefix + '-main-', '') %}
{% set var_ctx_prefix_run = var_use_prefix | bool | ternary(var_pod_prefix + '-run-', '') %}

- src: "{{ var_main_dir }}/templates/docker-compose.tpl.yml"
  dest: "docker-compose.yml"
  params:
    local: "{{ var_local | default(false) }}"
    main_dir: "{{ var_main_dir_container }}"
    pod_type: "{{ var_pod_type }}"
    named_volumes: "{{ params.named_volumes | default(false) }}"
    use_fluentd: "{{ params.use_fluentd }}"
    images: {{ params.custom_images | to_json }}
    memory: {{ params.custom_memory | to_json }}

    {% if var_pod_type in ['app', 'web'] %}

    use_varnish: "{{ params.use_varnish }}"
    use_pma: "{{ params.use_pma }}"
    use_adminer: "{{ params.use_adminer }}"
    use_theia: "{{ params.use_theia }}"
    use_minio_gateway: "{{ params.use_minio_gateway }}"
    use_filestash: "{{ params.use_filestash }}"
    use_custom_ssl: "{{ var_use_custom_ssl }}"
    use_certbot: "{{ params.use_certbot }}"

    {% endif %}

    {% if var_pod_type in ['app', 'cache'] %}

    use_redis: "{{ params.use_redis }}"
    use_memcached: "{{ params.use_memcached }}"

    {% endif %}

- src: "{{ var_main_dir }}/templates/docker-compose.tpl.run.yml"
  dest: "docker-compose.run.yml"
  params:
    local: "{{ var_local | default(false) }}"
    main_dir: "{{ var_main_dir_container }}"
    pod_type: "{{ var_pod_type }}"
    use_fluentd: "{{ params.use_fluentd }}"
    s3_cli: "{{ params.s3_cli }}"
    images: {{ params.custom_images | to_json }}
    memory: {{ params.custom_memory | to_json }}

    {% if var_pod_type in ['app', 'web'] %}

    use_certbot: "{{ params.use_certbot }}"

    {% endif %}

- src: "{{ var_main_dir }}/templates/docker-compose.env"
  dest: ".env"
  params:
    ctx_full_name: "{{ var_ctx_full_name }}"
    ctx_prefix_main: "{{ var_ctx_prefix_main }}"
    ctx_prefix_run: "{{ var_ctx_prefix_run }}"
    data_dir: "{{ var_data_dir }}"
    local: "{{ var_local | default(false) }}"
    type: "{{ var_pod_type }}"
    use_fluentd: "{{ params.use_fluentd }}"

    {% if var_pod_type in ['app', 'web'] %}

    public_http_port: "{{ params.custom_domain.public_http_port }}"
    public_https_port: "{{ params.custom_domain.public_https_port }}"
    private_http_port: "{{ params.custom_domain.private_http_port }}"
    private_https_port: "{{ params.custom_domain.private_https_port }}"

    {% endif %}

    db_port: "{{ params.custom_args.mysql.port | default('3306', true) }}"
    db_name: "{{ credentials.mediawiki.db.name }}"
    db_user: "{{ credentials.mediawiki.db.user }}"
    db_password: "{{ credentials.mediawiki.db.password }}"

    {% if var_pod_type in ['app', 'db'] %}

    db_root_password: "{{ credentials.mediawiki.db.root_password }}"

    {% endif %}

    {% if var_pod_type in ['app', 'web'] %}

    use_certbot: "{{ params.use_certbot }}"
    use_minio_gateway: "{{ params.use_minio_gateway }}"

    {% if params.use_minio_gateway | bool %}

    minio_gateway_endpoint: "{{ credentials.minio_gateway.endpoint }}"
    minio_gateway_access_key: "{{ credentials.minio_gateway.access_key }}"
    minio_gateway_secret_key: "{{ credentials.minio_gateway.secret_key }}"

    {% endif %}

    use_pma: "{{ params.use_pma }}"

    {% if params.use_pma | bool %}

    pma_user: "{{ var_db_gui_user }}"
    pma_password: "{{ var_db_gui_password }}"
    pma_login_cookie_validity: >-
      {{ params.custom_args.pma.login_cookie_validity | default('36000') }}

    {% endif %}

    use_adminer: "{{ params.use_adminer }}"

    {% if params.use_adminer | bool %}

    adminer_user: "{{ var_db_gui_user }}"
    adminer_password: "{{ var_db_gui_password }}"

    {% endif %}

    {% endif %}

    {% if var_pod_type in ['web'] %}

    {% if var_local | bool %}

    db_host_ip: ""

    {% else %}

    db_host_ip: "{{ input.dependencies.mysql.host }}"

    {% endif %}

    {% endif %}

    {% if params.use_fluentd %}

    fluentd_port: "{{ params.custom_args.fluentd.port }}"

    {% set var_fluentd_output_plugin = params.custom_args.fluentd.output_plugin
      | default(
        (var_pod_type in ['app']) | ternary('file', 'elasticsearch')
      )
    %}

    fluentd_output_plugin: "{{ var_fluentd_output_plugin }}"

    {% if var_fluentd_output_plugin == 'elasticsearch' %}

    elasticsearch_host_ip: "{{ input.dependencies.elasticsearch.host }}"

    {% endif %}

    {% endif %}

{% if var_pod_type in ['app', 'web'] %}

{% if not params.custom_args.nginx.custom | default(false) | bool %}

- src: "{{ var_main_dir }}/templates/nginx/nginx.conf"
  dest: "env/nginx/nginx.conf"
  params:
    conf: {{ params.custom_args.nginx.conf | default({}) | to_json }}
    enable_validate_origin: "{{ params.custom_args.nginx.enable_validate_origin }}"
    main_domain: "{{ params.custom_domain.main_domain }}"
    main_port: "{{ var_main_domain_port }}"
    main_ssl: "{{ params.custom_domain.main_ssl }}"
    main: "{{ params.custom_args.nginx.main | default({}) }}"
    use_varnish: "{{ params.use_varnish }}"
    use_theia: "{{ params.use_theia }}"

    {% if params.use_theia | bool %}

    theia_domain: "{{ params.custom_domain.theia_domain }}"
    theia_port: "{{ var_theia_domain_port }}"
    theia_ssl: "{{ params.custom_domain.theia_ssl }}"

    {% endif %}

    use_minio_gateway: "{{ params.use_minio_gateway }}"

    {% if params.use_minio_gateway | bool %}

    minio_gateway_domain: "{{ params.custom_domain.minio_gateway_domain }}"
    minio_gateway_port: "{{ var_minio_gateway_domain_port }}"
    minio_gateway_ssl: "{{ params.custom_domain.minio_gateway_ssl }}"

    {% endif %}

    use_filestash: "{{ params.use_filestash }}"

    {% if params.use_filestash | bool %}

    filestash_domain: "{{ params.custom_domain.filestash_domain }}"
    filestash_port: "{{ var_filestash_domain_port }}"
    filestash_ssl: "{{ params.custom_domain.filestash_ssl }}"

    {% endif %}

    use_pma: "{{ params.use_pma }}"

    {% if params.use_pma | bool %}

    pma_domain: "{{ params.custom_domain.pma_domain }}"
    pma_port: "{{ var_pma_domain_port }}"
    pma_ssl: "{{ params.custom_domain.pma_ssl }}"

    {% endif %}

    use_adminer: "{{ params.use_adminer }}"

    {% if params.use_adminer | bool %}

    adminer_domain: "{{ params.custom_domain.adminer_domain }}"
    adminer_port: "{{ var_adminer_domain_port }}"
    adminer_ssl: "{{ params.custom_domain.adminer_ssl }}"

    {% endif %}

{% endif %}

{% if params.use_varnish | bool %}

- src: "{{ var_main_dir }}/templates/varnish/default.vcl"
  dest: "env/varnish/default.vcl"
  params: {}

{% endif %}

{% set var_server = (params.custom_domain.main_ssl | bool) |
  ternary('https', 'http') + '://' +
  params.custom_domain.main_domain
  + (not (var_main_domain_port in ['80', '443'])) |
  ternary(':' + var_main_domain_port, '')
%}

- src: "{{ var_main_dir }}/templates/mediawiki/LocalSettings.php"
  dest: "env/mediawiki/LocalSettings.php"
  mode: "666"
  params:
    sitename: "{{ params.mediawiki.sitename }}"
    meta_namespace: "{{ params.mediawiki.meta_namespace }}"
    server: "{{ var_server }}"
    logo: "{{ params.mediawiki.logo }}"
    emergency_contact: "{{ params.mediawiki.emergency_contact }}"
    password_sender: "{{ params.mediawiki.password_sender }}"
    db_server: "mysql"
    db_name: "{{ credentials.mediawiki.db.name }}"
    db_user: "{{ credentials.mediawiki.db.user }}"
    db_password: "{{ credentials.mediawiki.db.password }}"
    lang: "{{ params.mediawiki.lang }}"
    secret_key: "{{ credentials.mediawiki.secret_key }}"
    authentication_token_version: "{{ params.mediawiki.authentication_token_version }}"
    upload_path: "{{ params.mediawiki.upload_path | default('') }}"
    use_s3_storage: "{{ params.use_s3_storage }}"

    {% if params.use_s3_storage | bool %}

    s3_key: ""
    s3_secret: ""
    s3_endpoint: "{{ credentials.uploads_bucket.endpoint | default('') }}"
    s3_region: "{{ credentials.uploads_bucket.region | default('') }}"
    s3_bucket: "{{ params.uploads_bucket_name }}"
    s3_path: "{{ params.uploads_bucket_path | default('') }}"

    {% endif %}

    disable_logs: "{{ params.disable_logs | default(false) }}"
    debug_logs: "{{ params.debug_logs | default(false) }}"
    use_varnish: "{{ params.use_varnish }}"
    use_redis: "{{ params.use_redis }}"
    use_memcached: "{{ params.use_memcached }}"

{% endif %}

{% if var_pod_type in ['app', 'db'] %}

- src: "{{ var_shared_dir }}/templates/mysql/init.sql"
  dest: "env/mysql/init.sql"
  params:
    viewer_password: "{{ credentials.mediawiki.db.viewer_password }}"
    db_name: "{{ credentials.mediawiki.db.name }}"
    db_user: "{{ credentials.mediawiki.db.user }}"
    db_password: "{{ credentials.mediawiki.db.password }}"

{% endif %}

{% if params.s3_cli == 'awscli' %}
  {% set var_s3_config_src = var_shared_dir + '/templates/awscli/credentials.ini' %}
  {% set var_s3_config_dest = 'env/awscli/credentials.ini' %}
{% elif params.s3_cli == 'rclone' %}
  {% set var_s3_config_src = var_shared_dir + '/templates/rclone/rclone.conf' %}
  {% set var_s3_config_dest = 'env/rclone/rclone.conf' %}
{% elif params.s3_cli == 'mc' %}
  {% set var_s3_config_src = var_shared_dir + '/templates/mc/config.json.j2' %}
  {% set var_s3_config_dest = 'env/mc/config.json' %}
{% endif %}

- src: "{{ var_s3_config_src }}"
  dest: "{{ var_s3_config_dest }}"
  params:
    - alias: "backup"
      endpoint: "{{ credentials.backup_bucket.endpoint }}"
      region: "{{ credentials.backup_bucket.region | default('') }}"
      access_key: "{{ credentials.backup_bucket.access_key }}"
      secret_key: "{{ credentials.backup_bucket.secret_key }}"
    - alias: "uploads"
      endpoint: "{{ credentials.uploads_bucket.endpoint }}"
      region: "{{ credentials.uploads_bucket.region | default('') }}"
      access_key: "{{ credentials.uploads_bucket.access_key }}"
      secret_key: "{{ credentials.uploads_bucket.secret_key }}"
      when: "{{ var_pod_type in ['app', 'web'] }}"
    - alias: "backup_replica"
      endpoint: "{{ credentials.backup_replica_bucket.endpoint }}"
      region: "{{ credentials.backup_replica_bucket.region | default('') }}"
      access_key: "{{ credentials.backup_replica_bucket.access_key }}"
      secret_key: "{{ credentials.backup_replica_bucket.secret_key }}"
      when: "{{ (params.enable_backup_replica | bool) and (var_pod_type in ['app', 'web']) }}"
    - alias: "uploads_replica"
      endpoint: "{{ credentials.uploads_replica_bucket.endpoint }}"
      region: "{{ credentials.uploads_replica_bucket.region | default('') }}"
      access_key: "{{ credentials.uploads_replica_bucket.access_key }}"
      secret_key: "{{ credentials.uploads_replica_bucket.secret_key }}"
      when: "{{ (params.enable_uploads_replica | bool) and (var_pod_type in ['app', 'web']) }}"

- src: "main/vars/vars.tpl.sh"
  dest: "vars.sh"
  mode: '{{ var_local | ternary(0666, 0640) }}'
  params:
    var_ctx_full_name: "{{ var_ctx_full_name }}"
    var_run__general__backup_is_delete_old: "true"
    var_run__general__main_base_dir: "{{ var_main_base_dir }}"
    var_run__general__main_base_dir_container: "{{ var_main_base_dir_container }}"
    var_run__general__orchestration: "compose"
    var_run__general__script_dir: "{{ var_main_dir }}/scripts"
    var_run__general__script_env_file: "{{ var_local | bool | ternary('local.sh', 'remote.sh') }}"
    var_run__general__toolbox_service: "toolbox"
    var_shared__script_dir: "{{ var_shared_dir }}/scripts"
    var_shared__delete_old__days: "3"

    var_load__migrate__db_name: "{{ credentials.mediawiki.db.name | default('') }}"
    var_load__migrate__db_user: "{{ credentials.mediawiki.db.user | default('') }}"
    var_load__migrate__db_pass: "{{ credentials.mediawiki.db.password | default('') }}"
    var_load__migrate__db_connect_wait_secs: "{{ params.migrate.db_connect_wait_secs | default('') | default('') }}"

    var_load__data_dir: "{{ input.data_dir }}"
    var_load__pod_type: "{{ var_pod_type }}"
    var_load__local: "{{ var_local | default('') | lower }}"
    var_load__use_main_network: "true"
    var_load__use_logrotator: "true"
    var_load__use_nginx: "true"
    var_load__use_mysql: "true"
    var_load__use_fluentd: "{{ params.use_fluentd | default('') | lower }}"
    var_load__use_theia: "{{ params.use_theia | default('') | lower }}"
    var_load__use_varnish: "{{ params.use_varnish | default('') | lower }}"
    var_load__use_custom_ssl: "{{ var_use_custom_ssl | default('') | lower }}"
    var_load__use_certbot: "{{ params.use_certbot | default('') | lower }}"

    # Tasks

    var_load__enable_db_backup: "{{ params.enable_db_backup | default('') | lower }}"
    var_load__enable_uploads_backup: "{{ params.enable_uploads_backup | default('') | lower }}"
    var_load__enable_logs_backup: "{{ params.enable_logs_backup | default('') | lower }}"
    var_load__enable_sync_backup: "{{ params.enable_sync_backup | default('') | lower }}"
    var_load__enable_backup_replica: "{{ params.enable_backup_replica | default('') | lower }}"

    var_load__enable_db_setup: "{{ params.enable_db_setup | default('') | lower }}"
    var_load__enable_uploads_setup: "{{ params.enable_uploads_setup | default('') | lower }}"
    var_load__enable_logs_setup: "{{ params.enable_logs_setup | default('') | lower }}"
    var_load__enable_sync_setup: "{{ params.enable_sync_setup | default('') | lower }}"
    var_load__enable_uploads_replica: "{{ params.enable_uploads_replica | default('') | lower }}"

    var_load__backup_replica_bucket_name: "{{ params.backup_replica_bucket_name | default('') }}"
    var_load__backup_replica_bucket_path: "{{ params.backup_replica_bucket_path | default('') }}"

    var_load__uploads_replica_bucket_name: "{{ params.uploads_replica_bucket_name | default('') }}"
    var_load__uploads_replica_bucket_path: "{{ params.uploads_replica_bucket_path | default('') }}"

    # Tasks

    var_load__block_ips: "{{ params.block_ips | default('') | lower }}"
    var_load__block_ips__max_amount: "{{ params.block_ips.max_amount | default('') }}"
    var_load__block_ips__amount_day: "{{ params.block_ips.amount_day | default('') }}"
    var_load__block_ips__amount_hour: "{{ params.block_ips.amount_hour | default('') }}"

    var_load__certbot__dev: "{{ params.certbot.dev | default('') | lower }}"
    var_load__certbot__domains: "{{ params.certbot.domains | default('') }}"
    var_load__certbot__email: "{{ params.certbot.email | default('') }}"
    var_load__certbot__force: "{{ params.certbot.force | default('') | lower }}"
    var_load__certbot__main_domain: "{{ params.certbot.main_domain | default('') }}"
    var_load__certbot__rsa_key_size: "{{ params.certbot.rsa_key_size | default('') }}"
    var_load__certbot__staging: "{{ params.certbot.staging | default('') | lower }}"

		var_load__db_backup__backup_date_format: "{{ params.db_backup.backup_date_format | default('') }}"
		var_load__db_backup__backup_time_format: "{{ params.db_backup.backup_time_format | default('') }}"
		var_load__db_backup__backup_datetime_format: "{{ params.db_backup.backup_datetime_format | default('') }}"
		var_load__db_backup__recursive_mode: "{{ params.db_backup.recursive_mode | default('') }}"
		var_load__db_backup__recursive_mode_dir: "{{ params.db_backup.recursive_mode_dir | default('') }}"
		var_load__db_backup__recursive_mode_file: "{{ params.db_backup.recursive_mode_file | default('') }}"
		var_load__db_backup__file_to_clear: "{{ params.db_backup.file_to_clear | default('') }}"
		var_load__db_backup__dir_to_clear: "{{ params.db_backup.dir_to_clear | default('') }}"
		var_load__db_backup__backup_bucket_sync_dir: "{{ params.db_backup.backup_bucket_sync_dir | default('') }}"
		var_load__db_backup__db_compressed_file_name: "{{ params.db_backup.db_compressed_file_name | default('') }}"
		var_load__db_backup__db_compress_type: "{{ params.db_backup.db_compress_type | default('') }}"
		var_load__db_backup__compress_pass: "{{ credentials.mediawiki_db.compress_pass | default('') }}"

    var_load__db_main__db_name: "{{ credentials.mediawiki.db.name }}"
    var_load__db_main__db_user: "{{ credentials.mediawiki.db.user }}"
    var_load__db_main__db_pass: "{{ credentials.mediawiki.db.password }}"
    var_load__db_main__db_connect_wait_secs: "{{ params.db_main.db_connect_wait_secs | default('300') }}"

    var_load__db_setup__db_compressed_file_name: "{{ params.db_setup.db_compressed_file_name | default('') }}"
    var_load__db_setup__db_file_name: "{{ params.db_setup.db_file_name | default('') }}"
    var_load__db_setup__verify_file_to_skip: "{{ params.db_setup.verify_file_to_skip | default('') }}"
    var_load__db_setup__is_compressed_file: "{{ params.db_setup.is_compressed_file | default('') | lower }}"
    var_load__db_setup__db_compress_type: "{{ params.db_setup.db_compress_type | default('') }}"
    var_load__db_setup__recursive_mode: "{{ params.db_setup.recursive_mode | default('') }}"
    var_load__db_setup__recursive_mode_dir: "{{ params.db_setup.recursive_mode_dir | default('') }}"
    var_load__db_setup__recursive_mode_file: "{{ params.db_setup.recursive_mode_file | default('') }}"
    var_load__db_setup__file_to_clear: "{{ params.db_setup.file_to_clear | default('') }}"
    var_load__db_setup__dir_to_clear: "{{ params.db_setup.dir_to_clear | default('') }}"
    var_load__db_setup__restore_use_s3: "{{ params.db_setup.restore_use_s3 | default('') | lower }}"
    var_load__db_setup__restore_remote_file: "{{ params.db_setup.restore_remote_file | default('') }}"
    var_load__db_setup__restore_s3_sync: "{{ params.db_setup.restore_s3_sync | default('') | lower }}"
    var_load__db_setup__restore_bucket_path_dir: "{{ params.db_setup.restore_bucket_path_dir | default('') }}"
    var_load__db_setup__restore_bucket_path_file: "{{ params.db_setup.restore_bucket_path_file | default('') }}"
		var_load__db_setup__compress_pass: >-
      {{ credentials.mediawiki_db.restore_compress_pass | default(credentials.mediawiki_db.compress_pass | default('')) }}

    var_load__log_summary__disabled: "{{ params.log_summary.disabled | default('') | lower }}"
    var_load__log_summary__days_ago: "{{ params.log_summary.days_ago | default('') }}"
    var_load__log_summary__max_amount: "{{ params.log_summary.max_amount | default('') }}"
    var_load__log_summary__verify_size_docker_dir: "{{ params.log_summary.verify_size_docker_dir | default('') | lower }}"
    var_load__log_summary__verify_size_containers: "{{ params.log_summary.verify_size_containers | default('') | lower }}"

    var_load__logs_setup__restore_bucket_path_dir: "{{ params.logs_setup.restore_bucket_path_dir | default('') }}"
    var_load__logs_setup__verify_file_to_skip: "{{ params.logs_setup.verify_file_to_skip | default('') }}"
    var_load__logs_setup__recursive_mode: "{{ params.logs_setup.recursive_mode | default('') }}"
    var_load__logs_setup__recursive_mode_dir: "{{ params.logs_setup.recursive_mode_dir | default('') }}"
    var_load__logs_setup__recursive_mode_file: "{{ params.logs_setup.recursive_mode_file | default('') }}"

	  var_load__s3_backup__bucket_name: "{{ params.backup_bucket_name | default('') }}"
	  var_load__s3_backup__bucket_path: "{{ params.backup_bucket_path | default('') }}"
	  var_load__s3_backup__cli: "{{ params.s3_cli | default('') }}"
	  var_load__s3_backup__endpoint: "{{ credentials.backup_bucket.endpoint | default('') }}"

	  var_load__s3_backup_replica__bucket_name: "{{ params.backup_replica_bucket_name | default('') }}"
	  var_load__s3_backup_replica__bucket_path: "{{ params.backup_replica_bucket_path | default('') }}"
	  var_load__s3_backup_replica__cli: "{{ params.s3_cli | default('') }}"
	  var_load__s3_backup_replica__endpoint: "{{ credentials.backup_replica_bucket.endpoint | default('') }}"

	  var_load__s3_uploads__bucket_name: "{{ params.uploads_bucket_name | default('') }}"
	  var_load__s3_uploads__bucket_path: "{{ params.uploads_bucket_path | default('') }}"
	  var_load__s3_uploads__cli: "{{ params.s3_cli | default('') }}"
	  var_load__s3_uploads__endpoint: "{{ credentials.uploads_bucket.endpoint | default('') }}"

	  var_load__s3_uploads_replica__bucket_name: "{{ params.uploads_replica_bucket_name | default('') }}"
	  var_load__s3_uploads_replica__bucket_path: "{{ params.uploads_replica_bucket_path | default('') }}"
	  var_load__s3_uploads_replica__cli: "{{ params.s3_cli | default('') }}"
	  var_load__s3_uploads_replica__endpoint: "{{ credentials.uploads_replica_bucket.endpoint | default('') }}"

    var_load__sync_setup__restore_bucket_path_dir: "{{ params.sync_setup.restore_bucket_path_dir | default('') }}"
    var_load__sync_setup__verify_file_to_skip: "{{ params.sync_setup.verify_file_to_skip | default('') }}"
    var_load__sync_setup__recursive_mode: "{{ params.sync_setup.recursive_mode | default('') }}"
    var_load__sync_setup__recursive_mode_dir: "{{ params.sync_setup.recursive_mode_dir | default('') }}"
    var_load__sync_setup__recursive_mode_file: "{{ params.sync_setup.recursive_mode_file | default('') }}"




    {% if (var_pod_type in ['app', 'web']) and (not (params.use_s3_storage | bool)) %}

    {% if params.enable_uploads_backup | bool %}

    {% set var_uploads_src_dir = '/var/main/data/mediawiki/uploads' %}
    {% set var_uploads_tmp_dir = '/tmp/main/tmp/backup/uploads' %}
    {% set var_uploads_compress_type = params.uploads_backup.compress_type | default('zip') %}
    {% set var_uploads_compressed_file_name = params.uploads_backup.compressed_file_name
      | default('uploads.[[ datetime ]].[[ random ]].zip')
    %}
    {% set var_uploads_compress_dest_file = var_uploads_tmp_dir + '/' + var_uploads_compressed_file_name %}
    {% set var_uploads_subtask_cmd_remote = 'backup:remote:default' %}
    {% set var_uploads_subtask_cmd_s3 = 's3:subtask:s3_uploads' %}

    var_task__uploads_backup__task__type: "backup"
    var_task__uploads_backup__backup_task__backup_src: "{{ var_uploads_src_dir }}"
    var_task__uploads_backup__backup_task__subtask_cmd_remote: "{{ var_uploads_subtask_cmd_remote }}"
    var_task__uploads_backup__backup_task__is_compressed_file: >-
      {{ params.uploads_backup.is_compressed_file | default('') | lower }}

    {% if params.uploads_backup.is_compressed_file | default(false) | bool %}

    var_task__uploads_backup__backup_task__compress_type: "{{ var_uploads_compress_type }}"
    var_task__uploads_backup__backup_task__compress_dest_file: "{{ var_uploads_compress_dest_file }}"
    var_task__uploads_backup__backup_task__compress_pass: >-
      {{ credentials.mediawiki_uploads.compress_pass | default('') }}

    {% endif %}

    var_task__uploads_backup__backup_task__backup_date_format: "{{ params.uploads_backup.backup_date_format | default('') }}"
    var_task__uploads_backup__backup_task__backup_time_format: "{{ params.uploads_backup.backup_time_format | default('') }}"
    var_task__uploads_backup__backup_task__backup_datetime_format: >-
      {{ params.uploads_backup.backup_datetime_format | default('') }}
    var_task__uploads_backup__backup_task__recursive_dir: "{{ var_uploads_tmp_dir }}"
    var_task__uploads_backup__backup_task__recursive_mode: "{{ params.uploads_backup.recursive_mode | default('') }}"
    var_task__uploads_backup__backup_task__recursive_mode_dir: "{{ params.uploads_backup.recursive_mode_dir | default('') }}"
    var_task__uploads_backup__backup_task__recursive_mode_file: "{{ params.uploads_backup.recursive_mode_file | default('') }}"
    var_task__uploads_backup__backup_task__file_to_clear: "{{ params.uploads_backup.file_to_clear | default('') }}"
    var_task__uploads_backup__backup_task__dir_to_clear: "{{ params.uploads_backup.dir_to_clear | default('') }}"
    var_task__uploads_backup__backup_remote__backup_bucket_sync_dir:  >-
      {{ params.uploads_backup.backup_bucket_sync_dir | default('[[ date ]]') }}
    var_task__uploads_backup__backup_remote__subtask_cmd_s3: "{{ var_uploads_subtask_cmd_s3 }}"
    var_task__uploads_backup__backup_remote__backup_date_format: "{{ params.uploads_backup.backup_date_format | default('') }}"
    var_task__uploads_backup__backup_remote__backup_time_format: "{{ params.uploads_backup.backup_time_format | default('') }}"
    var_task__uploads_backup__backup_remote__backup_datetime_format: >-
      {{ params.uploads_backup.backup_datetime_format | default('') }}

    {% endif %}

    {% if (params.restore_db | bool) and (params.enable_uploads_setup | bool) %}

    {% set var_uploads_s3_sync = (params.uploads_setup.restore_use_s3 | bool)
      and (params.uploads_setup.restore_s3_sync | bool)
    %}
    {% set var_uploads_dest_dir = '/var/main/data/mediawiki/uploads' %}
    {% set var_verify_file_to_skip = params.db_setup.verify_file_to_skip | default('/tmp/main/setup/uploads.skip') %}
    {% set var_uploads_tmp_base_dir = '/tmp/main/tmp/mediawiki' %}
    {% set var_uploads_compress_type = params.uploads_setup.compress_type | default('zip') %}
    {% set var_uploads_compressed_file_name = params.uploads_setup.compressed_file_name | default('uploads.zip') %}
    {% set var_uploads_compress_file = '/tmp/main/tmp/restore/uploads/' + var_uploads_compressed_file_name %}

    var_task__uploads_setup__task__type: "setup"
    var_task__uploads_setup__setup_task__verify_file_to_skip: "{{ var_verify_file_to_skip }}"
    var_task__uploads_setup__setup_task__subtask_cmd_remote: "setup:remote:default"
    var_task__uploads_setup__setup_task__is_compressed_file: >-
      {{ params.uploads_setup.is_compressed_file | default('') | lower }}

    {% if params.uploads_setup.is_compressed_file | default(false) | bool %}

    var_task__uploads_setup__setup_task__compress_type: "{{ var_uploads_compress_type }}"
    var_task__uploads_setup__setup_task__compress_src_file: "{{ var_uploads_compress_file }}"
    var_task__uploads_setup__setup_task__compress_dest_dir: "{{ var_uploads_tmp_base_dir }}"
    var_task__uploads_setup__setup_task__compress_pass: >-
      {{ credentials.mediawiki_uploads.compress_pass | default('') }}

    {% endif %}

    var_task__uploads_setup__setup_task__recursive_mode: "{{ params.uploads_setup.recursive_mode | default('') }}"
    var_task__uploads_setup__setup_task__recursive_mode_dir: "{{ params.uploads_setup.recursive_mode_dir | default('777') }}"
    var_task__uploads_setup__setup_task__recursive_mode_file: "{{ params.uploads_setup.recursive_mode_file | default('666') }}"

    {% if (not (var_uploads_s3_sync | bool))
      or (params.uploads_setup.is_compressed_file | default(false) | bool)
    %}

    {% set var_uploads_tmp_dir = var_uploads_tmp_base_dir + '/'
      + params.uploads_setup.restore_compressed_inner_dir
    %}

    var_task__uploads_setup__setup_task__recursive_dir: "{{ var_uploads_tmp_dir }}"
    var_task__uploads_setup__setup_task__move_src: "{{ var_uploads_tmp_dir }}"
    var_task__uploads_setup__setup_task__move_dest: "{{ var_uploads_dest_dir }}"
    var_task__uploads_setup__setup_task__file_to_clear: ""
    var_task__uploads_setup__setup_task__dir_to_clear: "{{ var_uploads_tmp_dir }}"

    {% else %}

    var_task__uploads_setup__setup_task__recursive_dir: "{{ var_uploads_dest_dir }}"

    {% endif %}

    var_task__uploads_setup__setup_verify__setup_dest_dir_to_verify: "{{ var_uploads_dest_dir }}"
    var_task__uploads_setup__setup_remote__restore_use_s3: >-
      {{ params.uploads_setup.restore_use_s3 | default('') | lower }}

    {% if not (params.uploads_setup.restore_use_s3 | bool) %}

    var_task__uploads_setup__setup_remote__restore_dest_file: >-
      {{ params.uploads_setup.restore_dest_file | default(var_uploads_compress_file) }}
    var_task__uploads_setup__setup_remote__restore_remote_file: >-
      {{ params.uploads_setup.restore_remote_file }}

    {% else %}

    var_task__uploads_setup__setup_remote__subtask_cmd_s3: "s3:subtask:s3_uploads"
    var_task__uploads_setup__setup_remote__restore_s3_sync: >-
      {{ params.uploads_setup.restore_s3_sync | default('') | lower }}

    {% if params.uploads_setup.is_compressed_file | default(false) | bool %}

    var_task__uploads_setup__setup_remote__restore_dest_dir: >-
      {{ params.uploads_setup.restore_dest_dir | default() }}
    var_task__uploads_setup__setup_remote__restore_dest_file: >-
      {{ params.uploads_setup.restore_dest_file | default(var_uploads_compress_file) }}

    {% else %}

    var_task__uploads_setup__setup_remote__restore_dest_dir: >-
      {{ params.uploads_setup.restore_dest_dir | default(var_uploads_dest_dir) }}
    var_task__uploads_setup__setup_remote__restore_dest_file: >-
      {{ params.uploads_setup.restore_dest_file | default() }}

    {% endif %}

    var_task__uploads_setup__setup_remote__restore_bucket_path_dir: >-
      {{ params.uploads_setup.restore_bucket_path_dir | default('') }}
    var_task__uploads_setup__setup_remote__restore_bucket_path_file: >-
      {{ params.uploads_setup.restore_bucket_path_file | default('') }}

    {% endif %}

    {% endif %}

    {% endif %}