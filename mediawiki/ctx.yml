## general vars - start ###

{% set var_local = params.main.local | default(false) | bool %}
{% set var_run = params.main.run | default({}) %}
{% set var_run_tasks = params.main.run_tasks | default({}) %}
{% set var_run_dict = params.main.run_dict | default({}) %}
{% set var_run_tasks_dict = params.main.run_tasks_dict | default({}) %}

## general vars - end ###

### others ###

{% set var_pod_type = params.main.type | default('') %}

{% if not (var_pod_type in ['app']) %}
  {% set error = {} %}
  {{ error['error.pod_type.invalid.' + var_pod_type] }}
{% endif %}

{% set var_main_dir = params.main.custom_dir + '/mediawiki' %}

{% set var_pod_dir_rel = '../..' %}
{% set var_data_dir = var_local
  | ternary(var_pod_dir_rel + '/' + params.pod.data_dir, params.pod.data_dir) %}
{% set var_data_dir_task = params.pod.local_data_dir_inside
  | default(params.pod.data_dir, true)
%}

{% set var_main_domain_port = params.main.custom_domain.main_ssl | bool |
  ternary(params.main.custom_domain.public_https_port, params.main.custom_domain.public_http_port)
%}
{% set var_pma_domain_port = params.main.custom_domain.pma_ssl | bool |
  ternary(params.main.custom_domain.private_https_port, params.main.custom_domain.private_http_port)
%}

{% if params.main.use_theia | bool %}
  {% set var_theia_domain_port = params.main.custom_domain.theia_ssl | bool |
    ternary(params.main.custom_domain.private_https_port, params.main.custom_domain.private_http_port)
  %}
{% endif %}

{% if params.main.use_minio_gateway | bool %}
  {% set var_minio_gateway_domain_port = params.main.custom_domain.minio_gateway_ssl | bool |
    ternary(params.main.custom_domain.private_https_port, params.main.custom_domain.private_http_port)
  %}
{% endif %}

{% if params.main.use_filestash | bool %}
  {% set var_filestash_domain_port = params.main.custom_domain.filestash_ssl | bool |
    ternary(params.main.custom_domain.private_https_port, params.main.custom_domain.private_http_port)
  %}
{% endif %}

{% if params.main.use_nextcloud | bool %}
  {% set var_nextcloud_domain_port = params.main.custom_domain.nextcloud_ssl | bool |
    ternary(params.main.custom_domain.private_https_port, params.main.custom_domain.private_http_port)
  %}
{% endif %}

### main ###

env_files:

- when: false

{% if var_pod_type in ['app', 'web'] %}

- src: "{{ params.main.auth_file }}"
  dest: "{{ var_main_dir }}/env/nginx/conf/.htpasswd"
  root: true

{% endif %}

templates:

{% set var_ctx_full_name = params.env_name  + '-' + params.ctx_name + '-' + params.pod.name %}
{% set var_ctx_prefix_main = params.main.use_prefix | bool
  | ternary(var_ctx_full_name + '-main', '')
%}
{% set var_ctx_prefix_run = params.main.use_prefix | bool
  | ternary(var_ctx_full_name + '-run', '')
%}

- src: "{{ var_main_dir }}/templates/docker-compose.tpl.yml"
  dest: "{{ var_main_dir }}/docker-compose.yml"
  root: true
  params:
    local: "{{ var_local | default(false) | bool | ternary('true', 'false') }}"
    pod_type: "{{ var_pod_type }}"
    use_fluentd: "{{ params.main.use_fluentd }}"
    external_volumes: "{{ params.main.external_volumes | default('false') }}"
    images: {{ params.main.custom_images | to_json }}
    memory: {{ params.main.custom_memory | to_json }}

    {% if var_pod_type in ['app', 'web'] %}

    use_pma: "{{ params.main.use_pma }}"
    use_theia: "{{ params.main.use_theia }}"
    use_minio_gateway: "{{ params.main.use_minio_gateway }}"
    use_filestash: "{{ params.main.use_filestash }}"
    use_nextcloud: "{{ params.main.use_nextcloud }}"

    {% endif %}

- src: "{{ var_main_dir }}/templates/docker-compose.tpl.run.yml"
  dest: "{{ var_main_dir }}/docker-compose.run.yml"
  root: true
  params:
    local: "{{ var_local | default(false) | bool | ternary('true', 'false') }}"
    pod_type: "{{ var_pod_type }}"
    use_fluentd: "{{ params.main.use_fluentd }}"
    images: {{ params.main.custom_images | to_json }}
    memory: {{ params.main.custom_memory | to_json }}

    {% if var_pod_type in ['app', 'web'] %}

    use_certbot: "{{ params.main.use_certbot }}"

    {% endif %}

- src: "{{ var_main_dir }}/templates/docker-compose.env"
  dest: "{{ var_main_dir }}/.env"
  root: true
  params:
    ctx_full_name: "{{ var_ctx_full_name }}"
    ctx_prefix_main: "{{ var_ctx_prefix_main }}"
    ctx_prefix_run: "{{ var_ctx_prefix_run }}"
    data_dir: "{{ var_data_dir }}"
    local: "{{ var_local | default(false) | bool | ternary('true', 'false') }}"
    type: "{{ var_pod_type }}"
    use_fluentd: "{{ params.main.use_fluentd }}"

    {% if var_pod_type in ['app', 'web'] %}

    public_http_port: "{{ params.main.custom_domain.public_http_port }}"
    public_https_port: "{{ params.main.custom_domain.public_https_port }}"
    private_http_port: "{{ params.main.custom_domain.private_http_port }}"
    private_https_port: "{{ params.main.custom_domain.private_https_port }}"
    pma_login_cookie_validity: >-
      {{ params.main.custom_args.pma.login_cookie_validity | default('36000') }}

    {% endif %}

    db_host: "{{ params.main.custom_args.mysql.host }}"
    db_port: "{{ params.main.custom_args.mysql.port }}"
    db_name: "{{ params.credentials.mediawiki.db.name }}"
    db_user: "{{ params.credentials.mediawiki.db.user }}"
    db_password: "{{ params.credentials.mediawiki.db.password }}"

    {% if var_pod_type in ['app', 'db'] %}

    db_root_password: "{{ params.credentials.mediawiki.db.root_password }}"

    {% endif %}

    s3_backup_access_key: "{{ params.credentials.mediawiki_backup_bucket.access_key }}"
    s3_backup_secret_key: "{{ params.credentials.mediawiki_backup_bucket.secret_key }}"

    {% if var_pod_type in ['app', 'web'] %}

    s3_uploads_access_key: "{{ params.credentials.mediawiki_uploads_bucket.access_key }}"
    s3_uploads_secret_key: "{{ params.credentials.mediawiki_uploads_bucket.secret_key }}"

    {% endif %}

    {% if var_pod_type in ['app', 'web'] %}

    use_certbot: "{{ params.main.use_certbot }}"
    use_minio_gateway: "{{ params.main.use_minio_gateway }}"

    {% if params.main.use_minio_gateway | bool %}

    minio_gateway_endpoint: "{{ params.credentials.minio_gateway.endpoint }}"
    minio_gateway_access_key: "{{ params.credentials.minio_gateway.access_key }}"
    minio_gateway_secret_key: "{{ params.credentials.minio_gateway.secret_key }}"

    {% endif %}

    {% endif %}

    {% if var_pod_type in ['web'] %}

    {% if var_local %}

    db_host_ip: ""

    {% else %}

    db_host_ip: "{{ params.dependencies_node_ip_dict['mysql'] }}"

    {% endif %}

    {% endif %}

    {% if params.main.use_fluentd %}

    fluentd_port: "{{ params.main.custom_args.fluentd.port }}"

    {% set var_fluentd_output_plugin = params.main.custom_args.fluentd.output_plugin
      | default(
        (var_pod_type in ['app']) | ternary('file', 'elasticsearch')
      )
    %}

    fluentd_output_plugin: "{{ var_fluentd_output_plugin }}"

    {% if var_fluentd_output_plugin == 'elasticsearch' %}

    elasticsearch_host_ip: "{{ params.dependencies_node_ip_dict['elasticsearch'] }}"

    {% endif %}

    {% endif %}

{% if var_pod_type in ['app', 'web'] %}

{% if not params.main.custom_args.nginx.custom | default(false) | bool %}

- src: "{{ var_main_dir }}/templates/nginx/nginx.conf"
  dest: "{{ var_main_dir }}/env/nginx/nginx.conf"
  root: true
  params:
    conf: {{ params.main.custom_args.nginx.conf | default({}) | to_json }}
    main_domain: "{{ params.main.custom_domain.main_domain }}"
    main_port: "{{ var_main_domain_port }}"
    main_ssl: "{{ params.main.custom_domain.main_ssl }}"
    main: "{{ params.main.custom_args.nginx.main | default({}) }}"
    use_theia: "{{ params.main.use_theia }}"

    {% if params.main.use_theia | bool %}

    theia_domain: "{{ params.main.custom_domain.theia_domain }}"
    theia_port: "{{ var_theia_domain_port }}"
    theia_ssl: "{{ params.main.custom_domain.theia_ssl }}"

    {% endif %}

    use_minio_gateway: "{{ params.main.use_minio_gateway }}"

    {% if params.main.use_minio_gateway | bool %}

    minio_gateway_domain: "{{ params.main.custom_domain.minio_gateway_domain }}"
    minio_gateway_port: "{{ var_minio_gateway_domain_port }}"
    minio_gateway_ssl: "{{ params.main.custom_domain.minio_gateway_ssl }}"

    {% endif %}

    use_filestash: "{{ params.main.use_filestash }}"

    {% if params.main.use_filestash | bool %}

    filestash_domain: "{{ params.main.custom_domain.filestash_domain }}"
    filestash_port: "{{ var_filestash_domain_port }}"
    filestash_ssl: "{{ params.main.custom_domain.filestash_ssl }}"

    {% endif %}

    use_nextcloud: "{{ params.main.use_nextcloud }}"

    {% if params.main.use_nextcloud | bool %}

    nextcloud_domain: "{{ params.main.custom_domain.nextcloud_domain }}"
    nextcloud_port: "{{ var_nextcloud_domain_port }}"
    nextcloud_ssl: "{{ params.main.custom_domain.nextcloud_ssl }}"

    {% endif %}

    use_pma: "{{ params.main.use_pma }}"

    {% if params.main.use_pma | bool %}

    pma_domain: "{{ params.main.custom_domain.pma_domain }}"
    pma_port: "{{ var_pma_domain_port }}"
    pma_ssl: "{{ params.main.custom_domain.pma_ssl }}"

    {% endif %}

{% endif %}

{% set var_server = (params.main.custom_domain.main_ssl | bool) |
  ternary('https', 'http') + '://' +
  params.main.custom_domain.main_domain
  + (not (var_main_domain_port in ['80', '443'])) |
  ternary(':' + var_main_domain_port, '')
%}

- src: "{{ var_main_dir }}/templates/mediawiki/LocalSettings.php"
  dest: "{{ var_main_dir }}/env/mediawiki/LocalSettings.php"
  mode: "666"
  root: true
  params:
    sitename: "{{ params.main.mediawiki.sitename }}"
    meta_namespace: "{{ params.main.mediawiki.meta_namespace }}"
    server: "{{ var_server }}"
    logo: "{{ params.main.mediawiki.logo }}"
    emergency_contact: "{{ params.main.mediawiki.emergency_contact }}"
    password_sender: "{{ params.main.mediawiki.password_sender }}"
    db_server: "mysql"
    db_name: "{{ params.credentials.mediawiki.db.name }}"
    db_user: "{{ params.credentials.mediawiki.db.user }}"
    db_password: "{{ params.credentials.mediawiki.db.password }}"
    lang: "{{ params.main.mediawiki.lang }}"
    secret_key: "{{ params.credentials.mediawiki.secret_key }}"
    authentication_token_version: "{{ params.main.mediawiki.authentication_token_version }}"

{% endif %}

children:

- name: "main/scripts/vars.run.yml"
  params:
    env_params: {{ params | to_json }}
    pod_custom_dir: "{{ var_main_dir }}"
    run: {{ var_run | to_json }}
    run_tasks: {{ var_run_tasks | to_json }}
    run_dict: {{ var_run_dict | to_json }}
    run_tasks_dict: {{ var_run_tasks_dict | to_json }}
    run_custom:
      var_custom__pod_type: "{{ var_pod_type }}"
      var_custom__local: "{{ var_local | bool | ternary('true', 'false') }}"
      var_custom__use_fluentd: "{{ params.main.use_fluentd | bool | ternary('true', 'false') }}"

      {% if var_pod_type in ['app', 'web'] %}

      var_custom__use_certbot: "{{ params.main.use_certbot | bool | ternary('true', 'false') }}"
      var_custom__use_nextcloud: "{{ params.main.use_nextcloud | bool | ternary('true', 'false') }}"

      {% if params.main.use_nextcloud | bool %}

      {% set var_nextcloud_protocol = (params.main.custom_domain.nextcloud_ssl | bool | ternary('https', 'http')) %}
      {% set var_nextcloud_port_suffix = (var_nextcloud_domain_port in ['80', '443'])
        | ternary('', ':' + var_nextcloud_domain_port)
      %}

      {% set var_nextcloud_url = var_nextcloud_protocol + '://' +
        params.main.custom_domain.nextcloud_domain + var_nextcloud_port_suffix
      %}

      var_custom__nextcloud_url: "{{ var_nextcloud_url }}"
      var_custom__nextcloud_domain: "{{ params.main.custom_domain.nextcloud_domain }}"
      var_custom__nextcloud_host: "{{ params.main.custom_domain.nextcloud_domain }}{{ var_nextcloud_port_suffix }}"
      var_custom__nextcloud_protocol: "{{ var_nextcloud_protocol }}"
      var_custom__nextcloud_admin_user: "{{ params.credentials.nextcloud.admin_user }}"
      var_custom__nextcloud_admin_pass: "{{ params.credentials.nextcloud.admin_pass }}"
      var_custom__s3_backup_access_key: "{{ params.credentials.wp_backup_bucket.access_key }}"
      var_custom__s3_backup_secret_key: "{{ params.credentials.wp_backup_bucket.secret_key }}"
      var_custom__s3_backup_bucket: "{{ params.main.backup_bucket_name }}"
      var_custom__s3_backup_hostname: "{{ params.credentials.wp_backup_bucket.host | default('') }}"
      var_custom__s3_backup_port: "{{ params.credentials.wp_backup_bucket.port | default('') }}"
      var_custom__s3_backup_region: "{{ params.credentials.wp_backup_bucket.region | default('') }}"
      var_custom__s3_backup_use_ssl: "{{ params.credentials.wp_backup_bucket.ssl | default(false) | bool | ternary('true', 'false') }}"
      var_custom__s3_backup_use_path_style: "{{ params.credentials.wp_backup_bucket.path_style | default('') }}"
      var_custom__s3_backup_legacy_auth: "{{ params.credentials.wp_backup_bucket.legacy_auth | default('') }}"
      var_custom__s3_uploads_access_key: "{{ params.credentials.wp_uploads_bucket.access_key }}"
      var_custom__s3_uploads_secret_key: "{{ params.credentials.wp_uploads_bucket.secret_key }}"
      var_custom__s3_uploads_bucket: "{{ params.main.uploads_bucket_name }}"
      var_custom__s3_uploads_hostname: "{{ params.credentials.wp_uploads_bucket.host | default('') }}"
      var_custom__s3_uploads_port: "{{ params.credentials.wp_uploads_bucket.port | default('') }}"
      var_custom__s3_uploads_region: "{{ params.credentials.wp_uploads_bucket.region | default('') }}"
      var_custom__s3_uploads_use_ssl: "{{ params.credentials.wp_uploads_bucket.ssl | default(false) | bool | ternary('true', 'false') }}"
      var_custom__s3_uploads_use_path_style: "{{ params.credentials.wp_uploads_bucket.path_style | default('') }}"
      var_custom__s3_uploads_legacy_auth: "{{ params.credentials.wp_uploads_bucket.legacy_auth | default('') }}"

      {% endif %}

      {% endif %}
