{% set var_is_web = params.pod_type in ['app', 'web'] %}
{% set var_use_nginx = var_is_web and (params.use_nginx | bool) %}
{% set var_use_grafana = var_is_web %}
{% set var_use_theia = var_is_web and (params.use_theia | bool) %}
{% set var_use_minio_gateway = var_is_web and (params.use_minio_gateway | bool) %}
{% set var_use_filestash = var_is_web and (params.use_filestash | bool) %}

{% set var_is_db = params.pod_type in ['app', 'db'] %}
{% set var_use_prometheus = var_is_db %}

{% set var_use_cadvisor = params.use_cadvisor | bool %}
{% set var_use_node_exporter = params.use_node_exporter | bool %}

{% set var_use_s3 = params.use_s3 | bool %}
{% set var_use_local_s3 = params.use_local_s3 | bool %}
{% set var_use_internal_fluentd = params.use_internal_fluentd | bool %}

version: '2.4'

x-logging:

  {#############################################################}
  {% if params.use_fluentd | bool %}

  mainlog: &mainlog
    driver: "fluentd"
    options:
      tag: "{% raw %}docker.{{.Name}}{% endraw %}"
      fluentd-address: "localhost:{{ params.fluentd_port }}"
  jsonlog: &jsonlog
    driver: "json-file"
    options:
      max-size: "50m"

  {% else %}

  mainlog: &mainlog
    driver: "json-file"
    options:
      max-size: "50m"

  {% endif %}
  {#############################################################}

networks:

  {#############################################################}
  {% if var_use_internal_fluentd %}

  log:
    driver: "bridge"

  {% endif %}
  {#############################################################}

  shared:
    external: true
    name: "{{ params.shared_network }}"

{#############################################################}
{% if (params.local | bool) and (params.named_volumes | bool) %}

volumes:
  prometheus: {}
  grafana: {}

{% endif %}
{#############################################################}

{#############################################################}
{% if params.use_secrets | bool %}

secrets:
  empty:
    file: "$DATA_DIR/secrets/empty.txt"

  {#############################################################}
  {% if var_use_minio_gateway %}

  minio_gateway_access_key:
    file: "$DATA_DIR/secrets/minio_gateway_access_key.txt"
  minio_gateway_secret_key:
    file: "$DATA_DIR/secrets/minio_gateway_secret_key.txt"

  {% endif %}
  {#############################################################}

  {#############################################################}
  {% if var_use_local_s3 %}

  local_s3_access_key:
    file: "$DATA_DIR/secrets/local_s3_access_key.txt"
  local_s3_secret_key:
    file: "$DATA_DIR/secrets/local_s3_secret_key.txt"

  {% endif %}
  {#############################################################}

  {#############################################################}
  {% if var_use_grafana %}

  grafana_security_admin_password:
    file: "$DATA_DIR/secrets/grafana_security_admin_password.txt"
  grafana_smtp_password:
    file: "$DATA_DIR/secrets/grafana_smtp_password.txt"

  {% endif %}
  {#############################################################}

{% endif %}
{#############################################################}

services:

  {#############################################################}
  {% if var_use_nginx %}

  nginx:
    container_name: "${CTX_PREFIX_MAIN}nginx"
    hostname: "nginx"
    build:
      context: .
      dockerfile: "shared/containers/nginx/Dockerfile"
      args:
        IMAGE: "{{ params.images.nginx_image }}"
        VERSION: "{{ params.images.nginx_version }}"
    restart: "unless-stopped"

    {#############################################################}
    {% if var_use_internal_fluentd %}

    depends_on:
    - "fluentd"

    {% endif %}
    {#############################################################}

    ports:
    - "{{ params.ports.public_http_port }}:80"
    - "{{ params.ports.public_https_port }}:443"
    - "{{ params.ports.private_http_port }}:9080"
    - "{{ params.ports.private_https_port }}:9443"
    networks:
    - "shared"
    volumes:

    {#############################################################}
    {% if params.use_custom_ssl | default(false) | bool %}

    - "./env/certbot/etc:/etc/ssl:ro"

    {% elif params.use_certbot | default(false) | bool %}

    - "$DATA_DIR/sync/certbot/etc:/etc/ssl:ro"

    {% endif %}
    {#############################################################}

    - "$DATA_DIR/sync/certbot/www:/var/www/certbot:ro"
    - "$DATA_DIR/sync/nginx:/var/main/data/sync/nginx:ro"
    - "$DATA_DIR/tmp/nginx:/tmp/main/nginx"
    - "$DATA_DIR/tmp/tmp/nginx:/tmp/main/tmp/nginx"
    logging: *mainlog

    {#############################################################}
    {% if (params.memory.nginx | default('')) != '' %}

    mem_limit: "{{ params.memory.nginx }}"

    {% endif %}
    {#############################################################}

  {% endif %}
  {#############################################################}

  {#############################################################}
  {% if var_use_grafana %}

  grafana:
    container_name: "${CTX_PREFIX_MAIN}grafana"
    hostname: "grafana"
    build:
      context: .
      dockerfile: "{{ params.main_dir }}/containers/grafana/Dockerfile"
      args:
        IMAGE: "{{ params.images.grafana_image }}"
        VERSION: "{{ params.images.grafana_version }}"
        MAIN_DIR: "{{ params.main_dir }}"
    restart: unless-stopped

    {#############################################################}
    {% if var_use_internal_fluentd %}

    depends_on:
    - "fluentd"

    {% endif %}
    {#############################################################}

    {#############################################################}
    {% if not (var_use_nginx) %}

    ports:
    - "{{ params.grafana_port }}:3000"

    {% endif %}
    {#############################################################}

    networks:
    - "shared"
    volumes:
    - "$DATA_DIR/sync/grafana/dashboards:/etc/grafana/provisioning/dashboards/dynamic"

    {#############################################################}
    {% if (params.local | bool) and (params.named_volumes | bool) %}

    - "grafana:/var/lib/grafana"

    {% else %}

    - "$DATA_DIR/grafana:/var/lib/grafana"

    {% endif %}
    {#############################################################}

    environment:
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_DOMAIN: "{{ params.grafana_server_domain }}"
      GF_SMTP_ENABLED: "{{ params.grafana_smtp_enabled }}"
      GF_SMTP_HOST: "{{ params.grafana_smtp_host }}"
      GF_SMTP_USER: "{{ params.grafana_smtp_user }}"
      GF_SMTP_FROM_ADDRESS: "{{ params.grafana_smtp_from_address }}"

      {#############################################################}
      {% if params.use_secrets | bool %}

      GF_SECURITY_ADMIN_PASSWORD__FILE: "/run/secrets/grafana_security_admin_password"
      GF_SMTP_PASSWORD__FILE: "/run/secrets/grafana_smtp_password"

      {% else %}

      GF_SECURITY_ADMIN_PASSWORD: $GRAFANA_SECURITY_ADMIN_PASSWORD
      GF_SMTP_PASSWORD: $GRAFANA_SMTP_PASSWORD

      {% endif %}
      {#############################################################}

    {#############################################################}
    {% if params.use_secrets | bool %}

    secrets:
      - "grafana_security_admin_password"
      - "grafana_smtp_password"

    {% endif %}
    {#############################################################}

    logging: *mainlog

    {#############################################################}
    {% if (params.memory.grafana | default('')) != '' %}

    mem_limit: "{{ params.memory.grafana }}"

    {% endif %}
    {#############################################################}

  {% endif %}
  {#############################################################}

  {#############################################################}
  {% if var_use_theia %}

  theia:
    container_name: "${CTX_PREFIX_MAIN}theia"
    hostname: "theia"
    build:
      context: .
      dockerfile: "shared/containers/theia/Dockerfile"
      args:
        IMAGE: "{{ params.images.theia_image }}"
        VERSION: "{{ params.images.theia_version }}"
    restart: "unless-stopped"
    user: root

    {#############################################################}
    {% if var_use_internal_fluentd %}

    depends_on:
    - "fluentd"

    {% endif %}
    {#############################################################}

    networks:
    - "shared"
    volumes:
    - "$DATA_DIR/.git:/home/project/.git:ro"
    - "$DATA_DIR:/home/project/data:ro"
    - "$DATA_DIR/sync:/home/project/sync:cached"
    - "$DATA_DIR/action:/home/project/action:cached"

    {#############################################################}
    {% if params.local | bool %}

    - "$DATA_DIR/log:/home/project/log:cached"
    - "$DATA_DIR/tmp:/home/project/tmp:cached"

    {% endif %}
    {#############################################################}

    - "$DATA_DIR/tmp/theia:/tmp/main/theia"
    - "$DATA_DIR/tmp/tmp/theia:/tmp/main/tmp/theia"
    logging: *mainlog

    {#############################################################}
    {% if (params.memory.theia | default('')) != '' %}

    mem_limit: "{{ params.memory.theia }}"

    {% endif %}
    {#############################################################}

  {% endif %}
  {#############################################################}

  {#############################################################}
  {% if var_use_minio_gateway %}

  minio_gateway:
    container_name: "${CTX_PREFIX_MAIN}minio_gateway"
    hostname: "minio_gateway"
    build:
      context: .
      dockerfile: "shared/containers/minio-gateway/Dockerfile"
      args:
        IMAGE: "{{ params.images.minio_gateway_image }}"
        VERSION: "{{ params.images.minio_gateway_version }}"
    restart: "unless-stopped"
    environment:

      {#############################################################}
      {% if params.use_secrets | bool %}

      MINIO_ACCESS_KEY_FILE: "minio_gateway_access_key"
      MINIO_SECRET_KEY_FILE: "minio_gateway_secret_key"

      {% else %}

      MINIO_ACCESS_KEY: "$MINIO_GATEWAY_ACCESS_KEY"
      MINIO_SECRET_KEY: "$MINIO_GATEWAY_SECRET_KEY"

      {% endif %}
      {#############################################################}

    {#############################################################}
    {% if params.use_secrets | bool %}

    secrets:
      - "minio_gateway_access_key"
      - "minio_gateway_secret_key"

    {% endif %}
    {#############################################################}

    {#############################################################}
    {% if var_use_internal_fluentd %}

    depends_on:
    - "fluentd"

    {% endif %}
    {#############################################################}

    networks:
    - "shared"
    volumes:
    - "$DATA_DIR/minio_gateway:/data"
    - "$DATA_DIR/tmp/minio_gateway:/tmp/main/minio_gateway"
    - "$DATA_DIR/tmp/tmp/minio_gateway:/tmp/main/tmp/minio_gateway"
    logging: *mainlog
    command: "gateway s3 '$MINIO_GATEWAY_ENDPOINT'"

    {#############################################################}
    {% if (params.memory.minio_gateway | default('')) != '' %}

    mem_limit: "{{ params.memory.minio_gateway }}"

    {% endif %}
    {#############################################################}

  {% endif %}
  {#############################################################}

  {#############################################################}
  {% if var_use_filestash %}

  filestash:
    container_name: "${CTX_PREFIX_MAIN}filestash"
    hostname: "filestash"
    build:
      context: .
      dockerfile: "shared/containers/filestash/Dockerfile"
      args:
        IMAGE: "{{ params.images.filestash_image }}"
        VERSION: "{{ params.images.filestash_version }}"
    restart: "unless-stopped"

    {#############################################################}
    {% if var_use_internal_fluentd %}

    depends_on:
    - "fluentd"

    {% endif %}
    {#############################################################}

    networks:
    - "shared"
    volumes:
    - "$DATA_DIR/tmp/filestash:/tmp/main/filestash"
    - "$DATA_DIR/tmp/tmp/filestash:/tmp/main/tmp/filestash"
    logging: *mainlog

    {#############################################################}
    {% if (params.memory.filestash | default('')) != '' %}

    mem_limit: "{{ params.memory.filestash }}"

    {% endif %}
    {#############################################################}

  {% endif %}
  {#############################################################}

  {#############################################################}
  {% if var_use_prometheus %}

  prometheus:
    container_name: "${CTX_PREFIX_MAIN}prometheus"
    hostname: "prometheus"
    build:
      context: .
      dockerfile: "{{ params.main_dir }}/containers/prometheus/Dockerfile"
      args:
        IMAGE: "{{ params.images.prometheus_image }}"
        VERSION: "{{ params.images.prometheus_version }}"
        MAIN_DIR: "{{ params.main_dir }}"
    restart: unless-stopped

    {#############################################################}
    {% if var_use_internal_fluentd %}

    depends_on:
    - "fluentd"

    {% endif %}
    {#############################################################}

    networks:
    - "shared"
    ports:
    - 9090:9090
    volumes:

    {#############################################################}
    {% if (params.local | bool) and (params.named_volumes | bool) %}

    - "prometheus:/prometheus"

    {% else %}

    - "$DATA_DIR/prometheus/data:/prometheus"

    {% endif %}
    {#############################################################}

    - "$DATA_DIR/tmp/prometheus:/tmp/main/prometheus"
    - "$DATA_DIR/tmp/tmp/prometheus:/tmp/main/tmp/prometheus"
    command:
    - '--config.file=/etc/prometheus/prometheus.yml'
    - '--storage.tsdb.path=/prometheus'
    - '--web.enable-admin-api'
    logging: *mainlog

    {#############################################################}
    {% if (params.memory.prometheus | default('')) != '' %}

    mem_limit: "{{ params.memory.prometheus }}"

    {% endif %}
    {#############################################################}

  {% endif %}
  {#############################################################}

  {#############################################################}
  {% if var_use_node_exporter %}

  node-exporter:
    container_name: "${CTX_PREFIX_MAIN}node_exporter"
    hostname: "node-exporter"
    build:
      context: .
      dockerfile: "{{ params.main_dir }}/containers/node_exporter/Dockerfile"
      args:
        IMAGE: "{{ params.images.node_exporter_image }}"
        VERSION: "{{ params.images.node_exporter_version }}"
    restart: unless-stopped

    {#############################################################}
    {% if var_use_internal_fluentd %}

    depends_on:
    - "fluentd"

    {% endif %}
    {#############################################################}

    networks:
    - "shared"
    expose:
      - 9100
    logging: *mainlog

    {#############################################################}
    {% if (params.memory.node_exporter | default('')) != '' %}

    mem_limit: "{{ params.memory.node_exporter }}"

    {% endif %}
    {#############################################################}

  {% endif %}
  {#############################################################}

  {#############################################################}
  {% if var_use_cadvisor %}

  cadvisor:
    container_name: "${CTX_PREFIX_MAIN}cadvisor"
    hostname: "cadvisor"
    build:
      context: .
      dockerfile: "{{ params.main_dir }}/containers/cadvisor/Dockerfile"
      args:
        IMAGE: "{{ params.images.cadvisor_image }}"
        VERSION: "{{ params.images.cadvisor_version }}"
    restart: unless-stopped

    {#############################################################}
    {% if var_use_internal_fluentd %}

    depends_on:
    - "fluentd"

    {% endif %}
    {#############################################################}

    networks:
    - "shared"
    expose:
      - 8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    logging: *mainlog

    {#############################################################}
    {% if (params.memory.cadvisor | default('')) != '' %}

    mem_limit: "{{ params.memory.cadvisor }}"

    {% endif %}
    {#############################################################}

  {% endif %}
  {#############################################################}

  {#############################################################}
  {% if var_use_local_s3 %}

  s3:
    container_name: "${CTX_PREFIX_MAIN}s3"
    hostname: "s3"
    build:
      context: .
      dockerfile: "shared/containers/minio/Dockerfile"
      args:
        IMAGE: "{{ params.images.minio_image }}"
        VERSION: "{{ params.images.minio_version }}"
    restart: "unless-stopped"

    {#############################################################}
    {% if params.use_internal_fluentd | bool %}

    depends_on:
    - "fluentd"

    {% endif %}
    {#############################################################}

    networks:
    - "shared"
    expose:
    - "9000"
    environment:

      {#############################################################}
      {% if params.use_secrets | bool %}

      MINIO_ROOT_USER_FILE: "/run/secrets/local_s3_access_key"
      MINIO_ROOT_PASSWORD_FILE: "/run/secrets/local_s3_secret_key"

      {% else %}

      MINIO_ROOT_USER: $LOCAL_S3_ACCESS_KEY
      MINIO_ROOT_PASSWORD: $LOCAL_S3_SECRET_KEY

      {% endif %}
      {#############################################################}

    {#############################################################}
    {% if params.use_secrets | bool %}

    secrets:
      - "local_s3_access_key"
      - "local_s3_secret_key"

    {% endif %}
    {#############################################################}

    volumes:
    - "$DATA_DIR/s3/data:/data"
    - "$DATA_DIR/tmp/s3:/tmp/main/minio"
    - "$DATA_DIR/tmp/tmp/s3:/tmp/main/tmp/minio"
    logging: *mainlog
    command: "server /data"

    {#############################################################}
    {% if (params.memory.local_s3 | default('')) != '' %}

    mem_limit: "{{ params.memory.local_s3 }}"

    {% endif %}
    {#############################################################}

  {% endif %}
  {#############################################################}

  toolbox:
    container_name: "${CTX_PREFIX_MAIN}toolbox"
    hostname: "toolbox"
    build:
      context: .
      dockerfile: "shared/containers/toolbox/Dockerfile"
      args:
        IMAGE: "{{ params.images.toolbox_image }}"
        VERSION: "{{ params.images.toolbox_version }}"
    restart: "unless-stopped"

    {#############################################################}
    {% if var_use_internal_fluentd %}

    depends_on:
    - "fluentd"

    {% endif %}
    {#############################################################}

    networks:
    - "shared"
    volumes:
    - "$DATA_DIR:/var/main/data"
    - "$DATA_DIR/tmp:/tmp/main"
    - "$DATA_DIR/log:/var/log/main"

    {#############################################################}
    {% if params.use_internal_ssl | bool %}

    - "./env/ssl:/etc/ssl:ro"

    {% endif %}
    {#############################################################}

    {#############################################################}
    {% if (params.local | bool) and (params.named_volumes | bool) %}

    - "prometheus:/var/main/data/prometheus"

    {% endif %}
    {#############################################################}

    logging: *mainlog
    command: "tail -f /dev/null"

    {#############################################################}
    {% if (params.memory.toolbox | default('')) != '' %}

    mem_limit: "{{ params.memory.toolbox }}"

    {% endif %}
    {#############################################################}

  {#############################################################}
  {% if var_use_s3 %}

  s3_cli:
    container_name: "${CTX_PREFIX_RUN}s3_cli"
    hostname: "s3_cli"
    build:
      context: .
      dockerfile: "shared/containers/{{ params.s3_cli }}/Dockerfile"
      args:
        IMAGE: "{{ params.images[params.s3_cli + '_image'] }}"
        VERSION: "{{ params.images[params.s3_cli + '_version'] }}"
    restart: "unless-stopped"

    {#############################################################}
    {% if var_use_internal_fluentd %}

    depends_on:
    - "fluentd"

    {% endif %}
    {#############################################################}

    networks:
    - "shared"
    volumes:
    - "$DATA_DIR:/var/main/data"
    - "$DATA_DIR/tmp:/tmp/main"
    - "$DATA_DIR/log:/var/log/main"
    logging: *mainlog
    entrypoint: ""
    command: "tail -f /dev/null"

    {#############################################################}
    {% if (params.memory.s3_cli | default('')) != '' %}

    mem_limit: "{{ params.memory.s3_cli }}"

    {% endif %}
    {#############################################################}

  {% endif %}
  {#############################################################}

  {#############################################################}
  {% if var_use_internal_fluentd %}

  fluentd:
    container_name: "${CTX_PREFIX_MAIN}fluentd"
    hostname: "fluentd"
    build:
      context: .
      dockerfile: "shared/containers/fluentd/Dockerfile"
      args:
        IMAGE: "{{ params.images.fluentd_image }}"
        VERSION: "{{ params.images.fluentd_version }}"
        OUTPUT_PLUGIN: "{{ params.fluentd_output_plugin }}"
    restart: "unless-stopped"
    ports:
    - "{{ params.fluentd_port }}:24224"
    - "{{ params.fluentd_port }}:24224/udp"
    networks:
    - "log"

    {#############################################################}
    {% if params.fluentd_output_plugin == 'elasticsearch' %}

    environment:
      ELASTICSEARCH_HOSTNAME: "{{ params.elasticsearch_host | urlsplit('hostname') }}"
      ELASTICSEARCH_PORT: "{{ params.elasticsearch_host | urlsplit('port') }}"

    {% endif %}
    {#############################################################}

    volumes:
    - "$DATA_DIR/log/fluentd:/var/log/main/fluentd"
    - "$DATA_DIR/tmp/fluentd:/tmp/main/fluentd"
    - "$DATA_DIR/tmp/tmp/fluentd:/tmp/main/tmp/fluentd"
    logging: *jsonlog

    {#############################################################}
    {% if (params.memory.fluentd | default('')) != '' %}

    mem_limit: "{{ params.memory.fluentd }}"

    {% endif %}
    {#############################################################}

  {% endif %}
  {#############################################################}
